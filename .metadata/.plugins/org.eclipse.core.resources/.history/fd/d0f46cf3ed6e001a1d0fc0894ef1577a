package programmers2;

//[2020 카카오공채] 외벽 점검
import java.util.*;

public class problem_15 {
	static int answer = -1;

	public static void main(String[] args) {
		int n = 50;
		int[] weak = { 1, 5, 10, 12, 22, 25 };
		int[] dist = { 4, 3, 2, 1 };

		int result = solution(n, weak, dist);
		System.out.println(result);
	}

	public static int solution(int n, int[] weak, int[] dist) {
		for (int i = (1 << dist.length) - 1; i >= 1; i--) { // 현재 구성된 멤버
			boolean[] visited = new boolean[weak.length];

		}

		return answer;
	}

	private static void simulation(int depth, int n, int[] weak, int[] dist, int [] array) {
		if(depth == array.length) {
			repair(array,weak,dist,n);
			return;
		}
		
		for(int i = depth ; i < dist.length ; i++) {
			array[depth] = dist[i];
			swap(depth,i,dist);
			simulation(depth+1,n,weak,dist,array);
			swap(i,depth,dist);
		}

	}
	private static boolean repair(int cur, int [] array, int [] weak, int n, boolean [] visited) {
		if(cur == array.length) {
			for(int i =0 ; i< visited.length ; i++) {
				if(!visited[i])
					return false;
			}
			
			return true;
		}
		
		boolean check = false;
		boolean [] tmpVisited  = new boolean[visited.length];
		System.arraycopy(visited, 0, tmpVisited, 0, visited.length);
		for(int i =0 ; i <weak.length ; i++) {
			if(!visited[i]) {
				check = goRepair(weak[i],array[cur],n,weak,visited);
				
				if(check)
					break;
				
				check = repair(cur+1,array,weak,n,visited);
				
				if(check)
					break;
				
				System.arraycopy(tmpVisited, 0, visited, 0, visited.length);
			}
		}
		
		return check;
		
	}
	private static boolean goRepair(int start , int dist,int n , int [] weak,  boolean[] visited) {
		for(int i =0 ; i < visited.length ; i++) {
			if(!visited[i]) {
				int target = Math.floorMod(weak[i]-start,n);
				
				if(0<= target && target <= dist)
					visited[i]= true;
			}
		}
		
		for(int i =0 ; i < visited.length ; i++) {
			if(!visited[i])
				return false;
		}
		
		return true;
	}
	
	private static void swap(int depth , int i , int [] array) {
		int tmp = array[depth];
		array[depth] = array[i];
		array[i]= tmp;
		
	}
}
