package search_algorithm;

//MT
import java.util.*;
import java.io.*;

public class problem_10265 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		st = new StringTokenizer(br.readLine());
		int[] array = new int[N];
		boolean[] visited = new boolean[N];
		for (int i = 0; i < N; i++) {
			int tmp = Integer.parseInt(st.nextToken()) - 1;
			if (tmp == i)
				array[i] = -1;
			else
				array[i] = tmp;
		}

		int answer = 0;
		int depth = 1;

		Set<Set<Integer>> totalSet = new HashSet<>();

		for (int i = 0; i < array.length; i++) {
			Set<Integer> tmp = new HashSet<>();
			tmp.add(i);
			dfs(depth, K, i, tmp, array);
			totalSet.add(tmp);
		}

		Iterator it = totalSet.iterator();
		while (it.hasNext()) {

		}
	}

	private static void dfs(int depth, int limit, int current, Set<Integer> set, int[] array, boolean[] visited) {
		if (depth > limit)
			return;

		if (current == -1)
			return;

		int next = array[current];
		set.add(next);
		if (!visited[next])
			dfs(depth + 1, limit, next, set, array, visited);

	}
}
