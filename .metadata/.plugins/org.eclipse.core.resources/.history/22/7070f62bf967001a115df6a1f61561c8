package search_algorithm;

//»ï°¢ÇüÀÇ °ª
import java.util.*;
import java.io.*;

public class problem_4902 {
	static int[][] triangle;
	static int big = Integer.MIN_VALUE;
	static int [][] cache;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String tmp = null;
		StringTokenizer st = null;
		int step = 1;
		while (true) {
			tmp = br.readLine();

			if (tmp.equals("0"))
				break;

			st = new StringTokenizer(tmp);

			int N = Integer.parseInt(st.nextToken());
			triangle = new int[N][];
			cache = new int[N][];
			int idx = 1;
			for (int i = 0; i < N; i++) {
				int[] array = new int[idx];
				
				for (int j = 0; j < array.length; j++) {
					array[j] = Integer.parseInt(st.nextToken());
					big = Math.max(array[j],big);
				}
				triangle[i] = array;
				cache[i] = array;
				
				idx += 2;
			}

			
			for(int s = 1 ; s <= N ; s++) {
				for(int i = 0 ; i< triangle.length ; i++) {
					for(int j =0 ; j< triangle[i].length ; j++) {
						if(j % 2 == 0) {
							cache[i][j] = calculate(s,i,j);
						}
					}
				}
			}
			
			System.out.println(step + ". " + big);
			step++;
			big = 0;
		}
	}

	private static int calculate(int step, int x ,int y) {
		int left = x;
		int right = y+step+1;
		
		int value = cache[x][y];
		for(int i = left ; i < right; i++) {
			value += triangle[step][i];
		}
		
		big = Math.max(big, value);
		
		return value;
	}

}
