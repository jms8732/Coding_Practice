package combination;

//부분 수열의 합
import java.util.*;
import java.io.*;

public class problem_1182 {
	static boolean[] visited;
	static int [] array;
	static int sum;
	static int count;
	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		try {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			array=  new int[N];
			visited = new boolean[N];
			sum = Integer.parseInt(st.nextToken());
			
			st = new StringTokenizer(br.readLine());
			//배열에 값 할당
			for(int i =0 ; i< N ; i++) {
				array[i] = Integer.parseInt(st.nextToken());
			}
			
			for(int i =0 ; i < array.length ; i++) {
				visited[i] = true;
				dfs(array[i],1);
				visited[i] = false;
			}
			
			System.out.println(count);
			
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	private static void dfs(int value, int depth) {
		if(value == sum) //값이 같다면
			count++; 
		if(depth == array.length) //다 돌았다면
			return;
		
		for(int i =0 ; i< array.length ; i++) {
			if(!visited[i])
			{
				visited[i] = true;
				dfs(value+array[i],depth+1);
				visited[i] = false;
			}
		}
	}
}
