package programmers1;

//단체 사진 찍기

public class problem_14 {

	public static void main(String[] args) {
		String[] data = { "N~F=0", "R~T>2" };
		int result = solution(2, data);
		System.out.println(result);

	}

	public static int solution(int n, String[] data) {
		char[] friends = { 'A', 'C', 'F', 'J', 'M', 'N', 'R', 'T' };
		int answer =0 ;
		answer = dfs(friends, 0, n, data);
		return answer;
	}

	private static int checkCondition(char[] friends, int n, String[] data) {
		String friend = new String(friends);
		for (int i = 0; i < n; i++) {
			char first = data[i].charAt(0);
			char second = data[i].charAt(2);
			char condition = data[i].charAt(3);
			int count = data[i].charAt(4) - '0';

			int firstIndex = friend.indexOf(first); // 첫번째 친구의 현재 위치
			int secondIndex = friend.indexOf(second); // 두번째 친구의 현재 위치
			int diff = 0;
			switch (condition) { // 부등호로 판단
			case '=':
				diff = Math.abs(secondIndex - firstIndex) - 1;
				if (diff != count) // 조건에 맞지 않으므로 return
					return 0;
				break;
			case '>':
				diff = Math.abs(secondIndex - firstIndex) - 1;
				if (diff <= count)
					return 0;
				break;
			case '<':
				diff = Math.abs(secondIndex - firstIndex) - 1;
				if (diff >= count)
					return 0;
				break;
			}
		}
		return 1;
	}
	private static int dfs(char[] friends, int depth, int n, String[] data,int count) {
		if (depth == friends.length) {
			return checkCondition(friends, n, data);
		}
		for (int i = depth; i < friends.length; i++) {
			swap(i, depth, friends);
			count += dfs(friends, depth + 1, n, data,count);
			swap(i, depth, friends);
		}
		
		return count;
	}

	private static void swap(int i, int depth, char[] friends) {
		char tmp = friends[depth];
		friends[depth] = friends[i];
		friends[i] = tmp;
	}
}
