package programmers;

import java.util.*;;

public class problem_18 {
	public static void main(String[] args0) {
		int[] tmp = { 1, 3, 2, 4, 2, 4, 2, 3 };
		int[] result = solution(tmp);
		for (int i : result)
			System.out.print(i + " ");
	}

	public static int[] solution(int[] answers) {
		int check1 = 0, check2 = 0, check3 = 0;
		int[] array1 = { 1, 2, 3, 4, 5 };
		int[] array2 = { 2, 1, 2, 3, 2, 4, 2, 5 };
		int[] array3 = { 3, 3, 1, 1, 2, 2, 4, 4, 5, 5 };
		for (int i = 0; i < answers.length; i++) {
			if (answers[i] == array1[i % array1.length])
				check1++;
			if (answers[i] == array2[i % array2.length])
				check2++;
			if (answers[i] == array3[i % array3.length])
				check3++;
		}
		PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder()); // 내림차순으로 정렬
		queue.add(check1);
		queue.add(check2);
		queue.add(check3);
		Queue person = new LinkedList<Integer>();
		person.add(1);
		person.add(2);
		person.add(3);
		HashMap<Integer, Integer> map = new HashMap<>();
		map.put(1, check1);
		map.put(2, check2);
		map.put(3, check3);
		int previous = 0;
		Vector<Integer> v = new Vector<>();
		while (!queue.isEmpty()) {
			int valuetmp = queue.poll();
			int personTmp = queue.poll();
			if(map.get(personTmp) == valuetmp)
				v.add(personTmp);
			if(valuetmp != queue.peek()) //값이 다르면
				break;
		}

		int[] answer = new int[v.size()];
		for (int i = 0; i < answer.length; i++) {
			answer[i] = v.get(i);
		}
		return answer;
	}
}
