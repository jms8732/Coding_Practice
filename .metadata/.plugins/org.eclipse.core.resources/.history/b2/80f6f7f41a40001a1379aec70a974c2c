package samsung_Atype;


//게리 맨더링
import java.util.*;
import java.io.*;

public class problem_17471 {
	static int value[]; //값
	static List<Integer>[] list; //연결된 요소
	static int answer= Integer.MIN_VALUE;
	
	public static void main(String[] args)throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		boolean[] visited = new boolean[N];
		value = new int[N];
		
		
		st = new StringTokenizer(br.readLine());
		for(int i =0 ; i< N ; i++) {
			value[i] = Integer.parseInt(st.nextToken());
		}
		
		list = new ArrayList[N];
		
		//연결된 요소 넣기
		for(int i =0 ; i < list.length ; i++) list[i] = new ArrayList<>();
		for(int i =0 ; i< N ; i++) {
			st = new StringTokenizer(br.readLine());
			int m = Integer.parseInt(st.nextToken());
			for(int l =0 ; l < m ; l++) {
				list[i].add(Integer.parseInt(st.nextToken()));
			}
		}
		
	}
	
	private static boolean isConnected(int depth,int n,boolean part, boolean[] visited, Queue<Integer> queue) {
		if(depth == n) {
			//연결이 된 경우
			return true;
		}
		boolean check = false;
		int idx = queue.poll();
		
		for(int i =0 ; i< list[idx].size() ; i++) {
			if(visited[list[idx].get(i)] == part) {
				check = isConnected(depth+1,n,part,visited,queue);
			}
		}
		return check;
	}
	
	
	private static void dfs(int depth, int next, boolean [] visited) {
		if(depth == visited.length) {
			//서로 나눠서 골라진 경우
			Queue<Integer> A = new LinkedList<>();
			Queue<Integer> B = new LinkedList<>();
			
			//현재 당 나누기
			for(int i =0 ; i < visited.length ; i++) {
				if(visited[i]) {
					A.add(i);
				}else
					B.add(i);
			}

		}
		
		for(int i =next ;i < visited.length ; i++) {
			visited[i] = true;
			dfs(depth+1, i+1,visited);
			visited[i] = false;
		}
	}
}
