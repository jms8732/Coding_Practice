package programmers;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Comparator;

//가장 먼 노드

public class problem_51 {
	static int count = 0;

	public static void main(String[] args) {
		int[][] edge = { { 3, 6 }, { 4, 3 }, { 3, 2 }, { 1, 3 }, { 1, 2 }, { 2, 4 }, { 5, 2 } };
		int result = solution(6, edge);
		System.out.println(result);
	}

	public static int solution(int n, int[][] edge) {
		int big = 0;
		int[] parent = new int[n];
		int[] countTmp = new int[n];
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
		}
		Arrays.sort(edge, new Comparator<int[]>() {
			@Override
			public int compare(int[] arg0, int[] arg1) {
				// TODO Auto-generated method stub
				if (arg0[0] < arg1[0]) // x좌표를 대상으로 오름차순 정렬
					return -1;
				else
					return 1;
			}

		});
		for (int i = 0; i < edge.length; i++) {
			int x = edge[i][0] - 1;
			int y = edge[i][1] - 1;
			union(parent, countTmp, x, y);
		}

		int answer = 0;
		for (int i = 0; i < countTmp.length; i++)
			if (big == countTmp[i])
				answer++;

		return answer;

	}

	public static int find(int[] parent, int idx) {
		count++;
		if (parent[idx] == idx)
			return idx;
		else {
			return find(parent, parent[idx]);
		}
	}

	public static void union(int[] parent, int[] countTmp, int idx1, int idx2) {
		int parent1 = find(parent, idx1);
		int parent2 = find(parent, idx2);

		count = 0;

		if (parent1 == parent2) // circle이 발생한다.
			return;

		if (parent1 < parent2) {
			parent[idx2] = find(parent,idx1);
			countTmp[idx2] = count;
		} else {
			parent[idx1] = find(parent,idx2);
			countTmp[idx1] = count;
		}
	}
}
