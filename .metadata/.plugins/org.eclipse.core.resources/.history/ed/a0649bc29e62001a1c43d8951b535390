package programmers2;

//[3차] 방금 그곡
import java.util.*;

public class problem_13 {
	static PriorityQueue<Node> music;

	public static void main(String[] args) {
		String m = "ABC";
		String[] infos = { "12:00,12:14,HELLO,C#DEFGAB", "13:00,13:05,WORLD,ABCDEF"};

		String result = solution(m, infos);
		System.out.println(result);
	}

	public static String solution(String m, String[] musicinfos) {
		music = new PriorityQueue<>();
		m = makeString(m);

		for (int i = 0; i < musicinfos.length; i++) {
			String cur = musicinfos[i];
			String[] split = cur.split(",");

			String startTime = split[0];
			String endTime = split[1];

			int totalMinutes = calculate(startTime, endTime);

			String title = split[2];
			String melody = split[3];

			search(totalMinutes, melody,m, title);
		}

		if (music.isEmpty()) {
			return "(None)";
		} else
			return music.poll().title;
	}

	private static String makeString(String pattern) {
		pattern = pattern.replaceAll("A#", "a");
		pattern = pattern.replaceAll("C#", "c");
		pattern = pattern.replaceAll("D#", "d");
		pattern = pattern.replaceAll("F#", "f");
		pattern = pattern.replaceAll("G#", "g");
		
		return pattern.;
	}

	private static void search(int tm, String melody, String pattern, String title) {
		// 시간이 길이보다 큰 경우
		StringBuilder sb = new StringBuilder();
		melody = makeString(melody);
		
		if (tm >= melody.length()) {
			int div = tm / melody.length();
			int mol = tm % melody.length();

			for (int i = 0; i < div; i++) {
				sb.append(melody);
			}

			sb.append(melody.substring(0, mol));
		} else {
			sb.append(melody.substring(0, tm));
		}

		if(sb.toString().contains(pattern))
			music.add(new Node(title,tm));
	}
	

	private static int calculate(String st, String et) {
		int sHour = Integer.parseInt(st.substring(0, 2));
		int sMin = Integer.parseInt(st.substring(3, 5));

		int eHour = Integer.parseInt(et.substring(0, 2));
		int eMin = Integer.parseInt(et.substring(3, 5));

		return Math.abs(sHour - eHour) * 60 + Math.abs(sMin - eMin);
	}


	private static class Node implements Comparable<Node> {
		String title;
		int duration;

		public Node(String t, int d) {
			this.title = t;
			this.duration = d;
		}

		@Override
		public int compareTo(Node arg0) {
			// TODO Auto-generated method stub
			if(this.duration > arg0.duration)
				return -1;
			else if(this.duration == arg0.duration)
				return 0;
			else
				return 1;
		}
	}

}
