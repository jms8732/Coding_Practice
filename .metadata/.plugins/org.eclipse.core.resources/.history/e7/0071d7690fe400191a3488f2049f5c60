package samsung;

import java.util.*;

public class problem_13460 {
	static char[][] board;
	static int N, M;
	static int[] rl = { 0, 1, 0, -1 };
	static int[] ud = { -1, 0, 1, 0 };
	static int gX = 0, gY = 0;
	static int tmpRX = 0, tmpRY = 0;
	static int tmpBX = 0, tmpBY = 0;
	static int direction = 0;

	public static void main(String[] args) {
		int rX = 0, rY = 0;
		int bX = 0, bY = 0;

		Scanner scanner = new Scanner(System.in);
		N = scanner.nextInt();
		M = scanner.nextInt();
		scanner.nextLine();
		int count = 0;
		int x = 0, y = 0;
		board = new char[N][M];
		for (int i = 0; i < N; i++) {
			String tmp = scanner.nextLine();
			char[] tmpp = tmp.toCharArray();
			for (int j = 0; j < tmpp.length; j++) {
				board[i][j] = tmpp[j];
				if (tmpp[j] == 'R') {
					rX = i;
					rY = j;
				} else if (tmpp[j] == 'B') {
					bX = i;
					bY = j;
				} else if (tmpp[j] == 'O') {
					gX = i;
					gY = j;
				}
			}

		}
		while (true) {
			int result = 10000;
			if (count > 10) {
				System.out.println("-1");
				break;
			}
			for (int i = 0; i < rl.length; i++) {
				int nxD = ud[i];
				int nyD = rl[i];
				result = rF(rX, rY, nxD, nyD, result, i);
			} // 위치 결정
				// 현재 위치와 거리 게산
			fill(rX, rY); // 움직인다.
			if (rX == tmpRX && rY == tmpRY) {
				System.out.println("-1");
				break;
			}
			rX = tmpRX;
			rY = tmpRY;
			boolean test = bF(bX, bY, ud[direction], rl[direction]); // 검사
			if (!test) {
				System.out.println("-1");
				break;
			} else {
				board[bX][bY] = '.';
				bX = tmpBX;
				bY = tmpBY;
				board[bX][bY] = 'B';
				count++;
				if (board[tmpRX][tmpRY] == 'O') {
					System.out.println(count);
					break;
				}
			}
			show();
		}
	}

	static void fill(int px, int py) {
		int d = 1;
		if (px == tmpRX) {
			int dY = tmpRY - py;
			if (dY < 0) {
				d *= -1;
			}
			int tmpY = dY * d;
			board[px][py] = 'o';
			if (tmpRX == gX && tmpRY == gY)
				board[tmpRX][tmpRY] = 'O';
			else
				board[tmpRX][tmpRY] = 'R';
			int tmp = py;
			do {
				board[px][tmp] = 'o';
				tmp += d;
			} while (tmp != tmpRY);

		} else if (py == tmpRY) {
			int dX = tmpRX - px;
			if (dX < 0) {
				d *= -1;
			}
			int tmpX = dX * d;
			board[px][py] = 'o';
			if (tmpRX == gX && tmpRY == gY)
				board[tmpRX][tmpRY] = 'O';
			else
				board[tmpRX][tmpRY] = 'R';

			int tmp = px;
			do {
				board[tmp][py] = 'o';
				tmp += d;
			} while (tmp != tmpRX);
		}
	}

	static boolean bF(int x, int y, int nxD, int nyD) {
		int nx = 0;
		int ny = 0;

		while (true) {
			nx = x + nxD;
			ny = y + nyD;
			if (board[nx][ny] == '#' || board[nx][ny] == 'R') {
				nx -= nxD;
				ny -= nyD;
				tmpBX = nx;
				tmpBY = ny;
				return true;
			} else if (board[nx][ny] == 'O')
				return false;
			else {
				x = nx;
				y = ny;
			}
		}

	}

	static int rF(int x, int y, int nxD, int nyD, int result, int d) {
		int nx = 0;
		int ny = 0;

		while (true) {
			nx = x + nxD;
			ny = y + nyD;

			if (board[nx][ny] == '#' || board[nx][ny] == 'B') {
				nx -= nxD;
				ny -= nyD;
				break;
			} else if (board[nx][ny] == 'O')
				break;
			else {
				x = nx;
				y = ny;
			}

		}
		int tmp = 0;
		if (board[nx][ny] == 'R')
			tmp = 10000;
		else if (board[nx][ny] == 'o')
			tmp = Math.abs(gX + nx) + Math.abs(gY + ny);
		else
			tmp = Math.abs(gX - nx) + Math.abs(gY - ny);
		if (result > tmp) {
			tmpRX = nx;
			tmpRY = ny;
			direction = d;
			return tmp;
		}
		return result;
	}

	static void show() {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}
}
