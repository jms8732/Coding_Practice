package samsung;

import java.util.*;

public class problem_13460 {
	static char[][] board;
	static int[] ud = { -1, 0, 1, 0 };
	static int[] rl = { 0, 1, 0, -1 };
	static boolean[][][][] visited;

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int N = scanner.nextInt();
		int M = scanner.nextInt();
		visited = new boolean[N][M][N][M]; // R의 x,y 좌표, B의 x,y 좌표
		int rx = 0, ry = 0, bx = 0, by = 0, count = 0;
		List<Pair> list = new Vector<Pair>();
		int gx, gy;
		scanner.nextLine();
		board = new char[N][M];
		for (int i = 0; i < N; i++) {
			String tmp = scanner.nextLine();
			for (int j = 0; j < tmp.length(); j++) {
				if (tmp.charAt(j) == 'R') {
					rx = i;
					ry = j;
				} else if (tmp.charAt(j) == 'B') {
					bx = i;
					by = j;
				} else if (tmp.charAt(j) == 'O') {
					gx = i;
					gy = j;
				}
				board[i][j] = tmp.charAt(j);
			}
		} // 좌표 설정 및 보드판에 채워 넣기
		int tmpRX = rx, tmpRY = ry;
		int tmpBX = bx, tmpBY = by;
		Pair p = new Pair(rx, ry, bx, by, count);
		list.add(p);
		while (!list.isEmpty()) {
			p = list.get(0);
			list.remove(0);
			if(p.count > 10) {
				System.out.println("-1");
				break;
			}
			visited[p.rx][p.ry][p.bx][p.by] = true;
			for (int i = 0; i < 4; i++) {
				int ix = ud[i];
				int iy = rl[i];
				while (true) {
					// 빨간색 구슬
					tmpRX += ix;
					tmpRY += iy;
					if (board[tmpRX][tmpRY] == '#' || board[tmpRX][tmpRY] == 'O') {
						tmpRX -= ix;
						tmpRY -= iy;
						break;
					}
				}
				while (true) {
					// 파란색 구슬
					tmpBX += ix;
					tmpBY += iy;
					if (board[tmpBX][tmpBY] == '#' || board[tmpBX][tmpBY] == 'O') {
						tmpBX -= ix;
						tmpBY -= iy;
						break;
					}
				}

				// 위치 변경
				if (rx == bx) {
					int diffB = Math.abs(by - tmpBY);
					int diffR = Math.abs(ry - tmpRY);
					if (diffB < diffR) {
						tmpRY += 1;
					} else
						tmpBY += 1;
				} else if (by == ry) {
					int diffB = Math.abs(bx - tmpBX);
					int diffR = Math.abs(rx - tmpRX);
					if (diffB < diffR) {
						tmpRX += 1;
					} else
						tmpBX += 1;
				}
				board[tmpRX][tmpRY] = 'R';
				board[rx][ry] = '.';
				rx = tmpRX;
				ry = tmpRY;
				board[tmpBX][tmpBY] = 'B';
				board[bx][by] = '.';
				bx = tmpBX;
				by = tmpBY;
				show();
				if (!visited[tmpRX][tmpRY][tmpBX][tmpBY]) // 안갔던 곳일 경우
				{
					count++;
					p = new Pair(tmpRX, tmpRY, tmpBX, tmpBY, count);
					list.add(p);
				}
			}
		}
	}
	static void show() {
		for(int i =0; i< board.length ; i++) {
			for(int j =0 ; j < board[i].length ; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
	}
}

class Pair {
	int rx, ry, bx, by, count;

	Pair(int rx, int ry, int bx, int by, int count) {
		this.rx = rx;
		this.ry = ry;
		this.bx = bx;
		this.by = by;
		this.count = count;
	}
}
