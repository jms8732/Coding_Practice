package others;
//골드바흐의 추측

import java.util.*;

public class problem_6588 {
	static int number;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		while(true) {
			number = sc.nextInt();
			if(number == 0)
				break;
			
			boolean[] prime = new boolean[number];
			List<Integer> tmp = new ArrayList<>();
			for(int i = 2 ; i < number ; i++) {
				if(!prime[i]) {
					prime[i] = true;
					
					//입력값 내 홀수 소수를 넣는다.
					if(i % 2 != 0) {
						tmp.add(i);
					}
					for(int j = i ; j < number; j+= i) {
						prime[j] = true;
					}
				}
			}
			
			int [] array = new int[tmp.size()];
			for(int i =0 ; i< array.length ; i++)
				array[i] = tmp.get(i);
			
			int [] answer = new int[2];
			int depth = 0, next =0 ;
			combination(depth,next,array,answer);
		}
	}
	private static boolean combination(int depth , int next , int [] array, int [] answer) {
		if(depth == answer.length) {
			if(number == answer[0] + answer[1]) {
				System.out.println(number + " = " + array[0] + " + " + array[1]);
				return true;
			}
			return false;
		}
		boolean check = false;
		for(int i = next ; i < array.length ; i++) {
			answer[depth] = array[i];
			check = combination(depth+1,i+1,array,answer);
			if(check)
				break;
		}
		
		return check;
	}
}
