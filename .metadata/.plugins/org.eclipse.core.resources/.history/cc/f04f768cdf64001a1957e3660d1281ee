package bruteForce;

//뱀과 사다리 게임
import java.util.*;
import java.io.*;

public class problem_16928 {
	static int [] map;
	public static void main(String []args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		map = new int[100];
		move = new int[100];
		Arrays.fill(move, arg1);
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		
		//사다리
		for(int i = 0 ; i< N ; i++) {
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			
			map[s-1] = e-1;
		}
		
		//뱀
		for(int i =0 ; i < M ; i++) {
			st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			
			map[s-1] = e-1;
		}
		
		startGame();
	}
	private static void startGame() {
		Queue<Integer> queue = new LinkedList<>();
		
		//처음 위치
		queue.add(1);
		
		while(!queue.isEmpty()) {
			int cur = queue.poll();
			
			if(cur == map.length) {
				System.out.println(move[cur-1]);
			}
			
			//주사위 굴린다.
			for(int i = 6 ; i>= 1; i--) {
				int next = cur + i; //굴린 위치
				if(map[next] != 0) {
					queue.add(map[next]);
				}
				
			}
		}
	}
	private static class Node{
		int idx, move;
		public Node(int i , int m) {
			this.idx = i;
			this.move = m;
		}
	}
}
