package programmers;

//무지의 먹방 라이브 16.5점

import java.util.*;

public class problem_39 {
	public static void main(String[] args) {
		int[] food_times = { 3, 1, 2 };
		int k = 1;
		int result = solution(food_times, k);
		System.out.println(result);
	}

	public static int solution(int[] food_times, long k) {
		List<Node> list = new ArrayList<>();

		for (int i = 0; i < food_times.length; i++) {
			list.add(new Node(food_times[i], i));
		}

		list.sort(new Comparator<Node>() {
			@Override
			public int compare(Node o1, Node o2) {
				// TODO Auto-generated method stub
				if (o1.count < o2.count) // 남은 시간으로 오름차순 정렬
					return -1;
				else
					return 1;
			}
		});

		for (int i = 0; i < list.size(); i++) {
			long currentCount = list.get(i).count;
			int size = list.size() - i;
			int nextIdx = 0;
			if (k > currentCount * size) {
				k -= currentCount * size;
				for (int j = i + 1; j < list.size(); j++) {
					if (currentCount != list.get(j).count)
						break;
					nextIdx = j;
				}
			} else {
				List<Node> tmpList = new ArrayList<>();
				for(int j = i; j < list.size() ; j++) {
					tmpList.add(list.get(j));
				}
				
				tmpList.sort(new Comparator<Node>() {

					@Override
					public int compare(Node o1, Node o2) {
						// TODO Auto-generated method stub
						if(o1.idx < o2.idx)
							return -1;
						else
							return 1;
					}
					
				});
				
				long iidx = k % tmpList.size();
				int index = tmpList.get((int)iidx).idx + 1 ;
				return index;
				
			}
			i = nextIdx;
		}
		return -1;
	}

	public static class Node {
		long count;
		int idx;

		public Node(long count, int idx) {
			this.count = count;
			this.idx = idx;
		}
	}
}
