package search_algorithm;

import java.util.*;
import java.io.*;

public class problem_5014 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		int F = Integer.parseInt(st.nextToken());
		int S = Integer.parseInt(st.nextToken());
		int G = Integer.parseInt(st.nextToken());
		int U = Integer.parseInt(st.nextToken());
		int D = Integer.parseInt(st.nextToken()) * -1;

		bfs(F, S, G, U, D);
	}

	private static void bfs(int F, int S, int G, int U, int D) {
		Queue<Node> steps = new LinkedList<>();
		int[] move = { U, D };
		boolean [] visited= new boolean[F];
		
		steps.add(new Node(S, 0));

		String answer = "use the stairs";

		while (!steps.isEmpty()) {
			Node current = steps.poll();
			visited[current.currentStep] = true;
			
			if (current.currentStep == G) {
				answer = Integer.toString(current.count);
				break;
			}
			for (int i = 0; i < 2; i++) {
				int nextStep = current.currentStep + move[i];
				
				if(nextStep < 0 || nextStep > F || visited[nextStep])
					continue;
				
				
				steps.add(new Node(nextStep,current.count+1));
			}
		}

		System.out.println(answer);

	}

	private static class Node {
		int currentStep;
		int count;

		public Node(int currentStep, int count) {
			this.currentStep = currentStep;
			this.count = count;
		}
	}
}
