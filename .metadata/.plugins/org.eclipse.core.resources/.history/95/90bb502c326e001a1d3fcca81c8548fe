package programmers2;

//[2020 카카오공채] 외벽 점검
import java.util.*;

public class problem_15 {
	static boolean[] visited;
	static int answer =-1;
	public static void main(String[] args) {
		int n = 12;
		int[] weak = {1,5,6,10};
		int[] dist= {1,2,3,4};
		
		int result = solution(n,weak,dist);
		System.out.println(result);
	}
	
	public static int solution(int n, int[] weak, int[] dist) {
		visited = new boolean[n];
		
        for(int i =0 ; i < 1<<dist.length ; i++) {
        	simulation(0,i,0,n,weak,dist);
        }
        
        
        return answer;
    }
	
	private static void simulation(int cur, int friendsDir,int count, int n, int [] weak, int [] dist) {
		if(isComplete(weak)) {
			if(answer == -1)
				answer = count;
			else
				answer = Math.min(answer, count);
			
			return;
		}
		
		if(cur == dist.length)
			return;
		
		for(int i= 0 ; i < n ; i++) {
			if(!visited[i]) {
				int curDir = friendsDir & 1<<cur;
				fullfill(n,i,curDir,dist[cur]);
				simulation(cur+1,friendsDir,count+1,n,weak,dist);
				backup(n,i,curDir,dist[cur]);
			}
		}
		
	}
	
	private static void backup(int n, int i , int dir ,int dist) {
		int count = 0;
		switch(dir) {
		case 0: //시계 반대 방향
			while(count <= dist) {
				visited[i]= false;
				i = Math.floorMod(--i,n);
				count++;
			}
			break;
		case 1: //시계 방향
			while(count <= dist) {
				visited[i]= false;
				i = Math.floorMod(++i, n);
				count++;
			}
			break;
		}
	}
	
	private static void fullfill(int n,int i , int dir, int dist) {
		int count = 0;
		switch(dir) {
		case 0: //시계 반대 방향
			while(count <= dist) {
				visited[i]= true;
				i = Math.floorMod(--i,n);
				count++;
			}
			break;
		case 1: //시계 방향
			while(count <= dist) {
				visited[i]= true;
				i = Math.floorMod(++i, n);
				count++;
			}
			break;
		}
	}
	private static boolean isComplete(int [] weak) {
		for(int i =0 ; i < weak.length ; i++) {
			if(!visited[weak[i]-1])
				return false;
		}
		
		return true;
	}
}
