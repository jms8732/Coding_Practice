package greedy;

//동전 뒤집기
import java.util.*;
import java.io.*;

public class problem_1285 {
	static char[][] map;
	static boolean[] col, row;
	static int N;
	static int answer = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		map = new char[N][N];
		row = new boolean[N];
		col = new boolean[N];

		for (int i = 0; i < N; i++) {
			String tmp = br.readLine();
			for (int j = 0; j < N; j++) {
				if (tmp.charAt(j) == 'T')
					answer++;
				map[i][j] = tmp.charAt(j);
			}
		}

		simulation();
		System.out.println(answer);
	}

	private static void simulation(int cur) {
		if (cur == N * N) {
			int count = 0;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == 'T')
						count++;
				}
			}

			answer = Math.min(count, answer);

			return;
		}

		for (int i = cur; i < N * N; i++) {
			int x = i / N;
			int y = i % N;

			int rowCount = 0, colCount = 0;

			// 행
			for (int j = 0; j < N; j++) {
				if (map[x][j] == 'T')
					rowCount++;
			}

			// 열
			for (int j = 0; j < N; j++) {
				if (map[j][y] == 'T')
					colCount++;
			}

			if (rowCount < colCount) {
				for (int j = 0; j < N; j++) {
					if (map[j][y] == 'H')
						map[j][y] = 'T';
					else
						map[j][y] = 'H';
				}

				simulation(i + 1);
			} else if (rowCount == colCount) {
				char[][] tmp = map.clone();
				for (int j = 0; j < N; j++) {
					if (map[j][y] == 'H')
						map[j][y] = 'T';
					else
						map[j][y] = 'H';
				}
				simulation(i + 1);
				
				for (int j = 0; j < N; j++) {
					if (map[x][j] == 'H')
						map[x][j] = 'T';
					else
						map[x][j] = 'H';
				}
				simulation(i + 1);
			} else {
				for (int j = 0; j < N; j++) {
					if (map[x][j] == 'H')
						map[x][j] = 'T';
					else
						map[x][j] = 'H';
				}

				simulation(i + 1);
			}
		}

	}

}
