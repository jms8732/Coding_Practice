package combination;

//소문난 칠공주
import java.util.*;
import java.io.*;

public class problem_1941 {
	static char[][] map;
	static boolean[][] visited; // 방문한 곳은 채크하기 위한 배열
	static int[] ud = { -1, 0, 1, 0 }; // 위아래
	static int[] rl = { 0, 1, 0, -1 }; // 양옆
	static int count; // 개수를 저장하는 변수

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		map = new char[5][5]; // 5*5 이차원 배열
		visited = new boolean[5][5];

		for (int i = 0; i < 5; i++) {
			String tmp = br.readLine();
			for (int j = 0; j < 5; j++) {
				map[i][j] = tmp.charAt(j);
			}
		}
		int sCount = 0, depth = 0;
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				if (!visited[i][j]) {
					visited[i][j] = true;
					if (map[i][j] == 'S')
						sCount += 1;
					dfs(i, j, depth, sCount);
					if (map[i][j] == 'S')
						sCount -= 1;
					visited[i][j] = false;
				}
			}
		}
		System.out.println(count);

	}

	private static void dfs(int x, int y, int depth, int sCount) {
		if (depth == 7) {
			if (sCount >= 4) {
				// 이다솜파가 4명이 존재
				count++;
			}
			return;
		}

		for (int i = 0; i < 4; i++) {
			int nx = x + ud[i];
			int ny = y + rl[i];

			if (nx < 0 || ny < 0 || nx >= 5 || ny >= 5)
				continue; // 범위를 벗어나는 경우

			if (!visited[nx][ny]) {
				visited[nx][ny] = true;
				if (map[nx][ny] == 'S')
					sCount += 1;
				dfs(nx, ny, depth + 1, sCount);
				if (map[nx][ny] == 'S')
					sCount -= 1;
				visited[nx][ny] = false;
			}
		}
	}
}
