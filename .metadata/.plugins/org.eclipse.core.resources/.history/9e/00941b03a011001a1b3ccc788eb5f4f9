package samsung;

//스타트와 링크
import java.util.*;
import java.io.*;

public class problem_14889 {
	static int N;
	static int map[][];
	static Set<Integer> totalSet;
	static Set<Integer> partialSet; // 스타트팀의 조합
	static int diff = Integer.MAX_VALUE;
	static Set<Set<Integer>> doubleCheck; // 중복제거르 위한 set

	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		try {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken()); // N
			map = new int[N][N];
			totalSet = new HashSet<>();
			partialSet = new HashSet<>();
			doubleCheck = new HashSet<>();
			// 전체 집합에 값 넣기
			for (int i = 0; i < N; i++) {
				totalSet.add(i);
			}

			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(st.nextToken()); // map 값 설정
				}
			}
			int count = 1;
			for (int i = 0; i <= N / 2; i++) {
				partialSet.add(i);
				dfs(i, i + 1, count);
				partialSet.remove(i);

			}
			System.out.println(diff);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private static void dfs(int x, int y, int currentIdx) {
		if (currentIdx == N / 2) {
			if (doubleCheck.contains(partialSet)) // 중복항목이 존재 할 경우
				return;
			Set<Integer> tmp = new HashSet<>(partialSet);
			doubleCheck.add(tmp);
			calculate();
			return;
		}

		for (int i = y; i < N; i++) {
			partialSet.add(i);
			dfs(x, i + 1, currentIdx + 1);
			partialSet.remove(i);
			System.out.println("currentIDx : " + currentIdx);
		}
	}

	private static void calculate() {
		Set<Integer> anotherSet = new HashSet<>(totalSet); // 링크 팀의 조합
		anotherSet.removeAll(partialSet); // 스타트팀의 조합에서 링크 팀의 조합을 뺀다.
		int sum1 = 0, sum2 = 0;

		if (doubleCheck.contains(anotherSet)) // 중복되는 항목이 존재할 경우
			return;

		doubleCheck.add(anotherSet);

		Object[] startTeam = partialSet.toArray();
		Object[] linkTeam = anotherSet.toArray();

		for (int i = 0; i < startTeam.length; i++) {
			int sx = (int) startTeam[i];
			int lx = (int) linkTeam[i];
			for (int j = i + 1; j < startTeam.length; j++) {
				int sy = (int)startTeam[j];
				int ly = (int)linkTeam[j];
				sum1 += map[sx][sy] + map[sy][sx];
				sum2 += map[lx][ly] + map[ly][lx];
			}
		}

		int di = Math.abs(sum1 - sum2);
		diff = Math.min(diff, di);
	}
}
