package samsung_Atype;

//캐슬 디펜스
import java.util.*;
import java.io.*;

public class problem_17135 {
	static int big = 0;
	static int initialMap[][];
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int D = Integer.parseInt(st.nextToken());

		int[][] map = new int[N + 1][M];
		initialMap = new int[N+1][M];
		
		// 초기화
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				initialMap[i][j] = map[i][j];
			}
		}
		int count = 0 , next = 0;
		dfs(N,M,D,next,count,map);
	}
	private static void copyMap(int[][] src, int[][]dest) {
		int idx =0 ;
		for(int [] tmp : src) {
			System.arraycopy(tmp, 0, dest[idx++], 0, tmp.length);
		}
	}
	
	private static void dfs(int N, int M, int D, int next, int count, int[][] map) {
		if (count == 3) {
			// 3개의 아처가 자리 잡은 경우
			int ec = 0;
			while (true) {
				if (isEnd(N, map)) {
					// 게임이 끝났는지의 여부 판단.
					break;
				}
				for (int i = N-1; i >= 0; i--) {
					for (int j = 0; j < map[N].length; j++) {
						if (map[i][j] == 1) {
							ec = attackEnemy(i, j, N, M, D, map);
						}
					}
				}
				downEnemy(N, map);
			}
			
			big = Math.max(big, ec);
			copyMap(initialMap,map); //맵을 원상 복귀 시킨다.
			return;
		}

		// 아처의 위치
		for (int i = next; i < M; i++) {
			if (map[N][i] == 0) {
				map[N][i] = 2;
				dfs(N, M, D, i + 1, count + 1, map);
				map[N][i] = 0;
			}
		}

	}

	private static boolean isEnd(int N, int[][] map) {
		for (int i = N-1; i >= 0; i--) {
			for (int j = 0; j < map[i].length; j++) {
				if (map[i][j] == 1)
					return false;
			}
		}

		return true;
	}

	private static int attackEnemy(int ex, int ey, int N, int M, int D, int[][] map) {
		int count =0 ;
		for (int i = 0; i < map[N].length; i++) {
			if (map[N][i] == 2) {
				// 현재 궁수의 위치
				int dtc = Math.abs(ex - N) + Math.abs(i - ey);
				if (dtc <= D) {
					// 거리가 D 이하일 경우
					map[ex][ey] = 0; // 적을 죽임
					count++;
				}
			}
		}
		
		return count;
	}

	private static void downEnemy(int N, int[][] map) {
		for (int i = N; i >= 0; i--) {
			for (int j = 0; j < map[i].length; j++) {
				if (map[i][j] == 1) {
					if (i + 1 <= N && map[i + 1][j] == 0) {
						if (i + 1 != N) {
							// 적이 내려옴
							map[i + 1][j] = map[i][j];
						}
						map[i][j] = 0;
					}
				}
			}
		}
	}
}
