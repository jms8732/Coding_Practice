package programmers1;
//¹è´Þ

import java.util.*;

public class problem_21 {
	static int count;

	public static void main(String[] args) {
		int[][] road = { { 1, 2, 1 }, { 2, 3, 3 }, 
				{ 5, 2, 2 }, { 1, 4, 2 }, 
				{ 5, 3, 1 }, { 5, 4, 2 }
				};
		int result = solution(6, road, 4);
		System.out.println(result);
	}

	public static int solution(int N, int[][] road, int K) {
		int answer = 0;
		List<Node> list[] = new ArrayList[N];
		int[] dist = new int[N];
		boolean[] visited = new boolean[N];

		for (int i = 0; i < N; i++)
			list[i] = new ArrayList<>();

		for (int i = 0; i < N; i++) {
			int s = road[i][0] - 1;
			int f = road[i][1] - 1;
			if (s > f) {
				int tmp = s;
				s = f;
				f = tmp;
			}
			int w = road[i][2];
			list[s].add(new Node(f, w));
		}
		visited[0] = true;
		count++;
		dfs(K, 0, 0, list, visited);
		return count;
	}

	private static void dfs(int K, int current, int value, List<Node> list[], boolean[] visited) {
		if(value == K)
			return;
		
		for (int i = 0; i < list[current].size(); i++) {
			Node tmp = list[current].get(i);
			int next = tmp.cur;
			int weight = tmp.weight;

			if (value + weight <= K) {
				if(!visited[next]) {
					visited[next]= true;
					count++;
				}
				dfs(K, next, value + weight, list, visited);
			}
		}
	}

	private static class Node {
		int cur = 0;
		int weight = 0;

		public Node(int current, int weight) {
			this.cur = current;
			this.weight = weight;
		}
	}
}
