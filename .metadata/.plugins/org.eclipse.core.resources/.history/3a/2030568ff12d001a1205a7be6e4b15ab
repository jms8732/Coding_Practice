package combination;

//N-Queen
import java.io.*;

public class problem_9663 {
	static int count = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		long start = System.currentTimeMillis();
		int result = solution(Integer.parseInt(br.readLine()));
		long end = System.currentTimeMillis();
		System.out.println("time : " + (end - start) / 1000.0);
		System.out.println(result);
	}

	public static int solution(int n) {
		boolean[] idx = new boolean[n];
		int depth = 0;

		dfs(depth, n, idx);
		return count;
	}

	private static void dfs(int depth, int n, boolean[] idx) {
		if (depth == n) {
			count++;
			return;
		}

		for (int i = 0; i < n; i++) {
			if (!idx[i]) {
				int left = i - 1;
				int right = i + 1;

			}
		}

	}

	private static void copyMap(boolean[] src, boolean[] target) {
		System.arraycopy(src, 0, target, 0, src.length);
	}

}
