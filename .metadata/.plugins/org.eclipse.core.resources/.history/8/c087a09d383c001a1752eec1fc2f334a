package combination;

import java.util.*;
import java.io.*;

public class problem_15663 {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		
		int [] value = new int[N];
		st = new StringTokenizer(br.readLine());
		for(int i =0 ; i < N ; i++) value[i]=  Integer.parseInt(st.nextToken());
		Arrays.sort(value); //오름차순 정렬
		int depth = 0;
		StringBuilder sb  = new StringBuilder();
		String previous = null;
		permutation(depth,0,M,value,sb,previous);
	}
	
	private static String permutation(int depth, int next, int M , int[] value , StringBuilder sb, String pre) {
		if(depth == M)
		{
			if(!sb.toString().equals(pre)) {
				//이전 값과 동일하지 않을 경우
				print(sb.toString());
			}
			return sb.toString();
		}
		
		for(int i =next ; i< value.length ; i++) {
			String tmp = Integer.toString(value[i]);
			sb.append(tmp+ " " );
			pre = permutation(depth+1,i+1,M,value,sb,pre);
			sb.delete(sb.length()- tmp.length()-1, sb.length());
			
		}
		
		return pre;
	}
	
	private static void print(String s) {
		System.out.println(s);
	}
}
