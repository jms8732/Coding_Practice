package dp;

//평범한 배낭
import java.util.*;
import java.io.*;

public class problem_12865 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		List<Integer> list[] = new ArrayList[101];
		for (int i = 1; i < list.length; i++)
			list[i] = new ArrayList<>();
		// 값 할당
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int w = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			list[w].add(v);
			list[w].sort(Collections.reverseOrder()); // 내림차순으로 정렬
		}
		List<Integer> value = new ArrayList<>();

		for (int i = 1; i < list.length; i++)
			if (!list[i].isEmpty())
				value.add(i);

		int[][] dp = new int[value.size()][K + 1];
		for (int j = 0; j < value.size(); j++) {
			int step = 1;
			int sum = 0;
			for (int k = 0; k < list[value.get(j)].size(); k++) {
				sum += list[value.get(j)].get(k);
				if(value.get(j) * step <= K )
					dp[j][value.get(j) * (step++)] = sum;
			}
		}

		for (int i = 1; i < dp.length; i++) {
			System.arraycopy(dp[i - 1], 0, dp[i], 0, value.get(i));
			for (int j = value.get(i) + 1; j <= K; j++) {
				dp[i][j] = Math.max(dp[i - 1][j], dp[i][value.get(i)] + dp[i][j - value.get(i)]);
			}
			dp[i][value.get(i)] = Math.max(dp[i - 1][value.get(i)], dp[i][value.get(i)]);
		}

		System.out.println(dp[value.size() - 1][K]);
	}
}
