package programmers;

//더 맵게
public class problem_15 {
	public static void main(String[] args) {
		int[] tmp = { 1, 2, 3, 5, 6, 7 };
		int k = 100;
		int result = solution(tmp, k);
		System.out.println(result);
	}

	public static int solution(int[] scoville, int k) {
		int count = 0;
		for (int i = 0; i < scoville.length; i++) {
			boolean check = false;
			minHeap(scoville);
			int previous = scoville[0];
			scoville = delete(scoville);
			int next = scoville[0];
			scoville = delete(scoville);
			int mix = previous + next * 2;
			count++;
			scoville = insert(scoville, mix);
			for(int j = 0; j < scoville.length; j++) {
				if(scoville[j] <= k ) {
					check = true;
					break;
				}
			}
			if(!check)
				return count;
		}
		return -1;
	}

	public static int[] insert(int[] array, int value) {
		int[] tmp = new int[array.length + 1];
		for (int i = 0; i < array.length; i++) {
			tmp[i] = array[i];
		}
		tmp[tmp.length - 1] = value;
		return tmp;
	}

	public static int[]  delete(int[] array) {

		int[] tmp = new int[array.length - 1];
		for (int i = 0; i < tmp.length; i++) { // 값 복사
			tmp[i] = array[i+1];
		}
		return tmp;
	}

	public static void minHeap(int[] array) {
		int left = 0;
		int right = 0;
		int rootIdx = 0;
		int leftIdx = 0;
		int rightIdx = 0;
		int root = 0;
		int min = 0;
		int point = 0;

		for (int i = array.length - 1; i > 0; i -= 2) {
			if (i % 2 == 0) // 짝수 일 경우
				rootIdx = (i - 2) / 2;
			else // 홀수 일 경우,
				rootIdx = (i - 1) / 2;
			leftIdx = 2 * rootIdx + 1; // 해당 루트의 왼쪽 자식
			rightIdx = 2 * rootIdx + 2; // 해당 루트의 오른쪽 자식

			if (rightIdx <= array.length - 1) {
				if (array[leftIdx] < array[rightIdx]) {
					min = array[leftIdx];
					point = leftIdx;
				} else {
					min = array[rightIdx];
					point = rightIdx;
				}
			} else {
				point = leftIdx;
				min = array[leftIdx];
			}

			root = array[rootIdx];
			if (root > min) { // swap
				int tmp = root;
				array[rootIdx] = min;
				array[point] = tmp;
			}
		}
	}
}
