package dp;

//평범한 배낭
import java.util.*;
import java.io.*;

public class problem_12865 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		
		List<Node> list  =new ArrayList<>();
		int [] value = new int[101];
	
		
		//값 할당
		for(int i =0 ; i< N ; i++) {
			st = new StringTokenizer(br.readLine());
			int w = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			if(value[w] != 0)
				value[w] = Math.max(value[w], v);
			else
				value[w] = v;
		}
		
		for(int i = 1; i < value.length ; i++) 
			if(value[i] != 0 )
				list.add(new Node(i,value[i]));
		
		int IMPOSSIBLE = -10000000;
		int [][] dp = new int[list.size()][K+1];
		for(int [] tmp : dp)
			Arrays.fill(tmp,IMPOSSIBLE );
		
		dp[0][list.get(0).weight] = list.get(0).value;
		
		for(int i = 1 ; i < list.size(); i++) {
			System.arraycopy(dp[i-1], 0, dp[i], 0, list.get(i).weight);
			dp[i][list.get(i).weight] = Math.max(dp[i-1][list.get(i).weight], list.get(i).value);
			for(int j = list.get(i).weight+1 ; j <= K ; j++) {
				dp[i][j] = Math.max(dp[i-1][j],dp[i-1][j-list.get(i).weight] + list.get(i).value);
			}
		}
		
		System.out.println(dp[list.size()-1][K]);
	}
	
	private static class Node{
		int weight, value;
		public Node(int w, int v) {
			this.weight =w;
			this.value = v;
		}
	}
}
