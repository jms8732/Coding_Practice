package samsung;

import java.util.*;

public class problem_14502 {
	static int[][] map;
	static int N, M;
	static Vector<Point> v;
	static int[] ud = { -1, 0, 1, 0 };
	static int[] rl = { 0, 1, 0, -1 };
	static int result;
	static int count;
	static boolean visited[][];

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		N = scanner.nextInt();
		M = scanner.nextInt();
		v = new Vector<Point>();
		visited = new boolean[N][M];
		map = new int[N][M];
		int[][] tmpM = new int[N][M];
		for (int i = 0; i < N; i++) { // 입력 저장
			for (int j = 0; j < M; j++) {
				int tmp = scanner.nextInt();
				map[i][j] = tmp;
				if (tmp == 2) {
					Point p = new Point(i, j);
					v.add(p);
				}
			}
		}
		copyMap(tmpM, map);
		setWall(0, 0);

	}

	static void virus() {
		while (!v.isEmpty()) {
			Point pTmp = v.get(0);
			v.remove(0);
			int x = pTmp.x;
			int y = pTmp.y;
			for (int i = 0; i < rl.length; i++) {
				int nx = x + ud[i];
				int ny = y + rl[i];
				if (nx < 0 || nx > map.length -1 || ny < 0 || ny > map[x].length -1) {
					continue;
				} else {
					if (map[nx][ny] == 0) {
						map[nx][ny] = 2;
						Point ppTmp = new Point(nx, ny);
						v.add(ppTmp);
					}
				}
			}

			show(map);
		}
	}

	static int dfs(int x, int y) {
		for (int i = 0; i < rl.length; i++) {
			int nx = x + ud[i];
			int ny = y + rl[i];
			if (nx < 0 || nx > map.length-1 || ny < 0 || ny > map[x].length-1) {
				continue;
			} else {
				if (map[nx][ny] == 0) {
					count++;
					dfs(nx, ny);
				}
			}
		}
		return count;
	}

	static void setWall(int start, int depth) {
		if (depth == 3) {
			virus();
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (map[i][j] == 0 && !visited[i][j])
						result = Math.max(result, dfs(i, j));
				}
			}
			return;
		}

		for (int i = start; i < N * M; i++) {
			int x = i / M;
			int y = i % M;
			if (map[x][y] == 0) {
				map[x][y] = 1;
				setWall(start + 1, depth + 1);
				map[x][y] = 0; // 다시 원상 복귀
			}
		}

	}

	static void show(int[][] m) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				System.out.print(m[i][j] + " ");
			}
			System.out.println();
		}
	}

	static void copyMap(int[][] m, int n[][]) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				m[i][j] = n[i][j];
			}
		}
	}
}

class Point {
	int x, y;

	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}