package programmers;

//브라이언의 고민
import java.util.*;

public class problem_28 {
	static HashMap<Character, Boolean> map;

	public static void main(String[] args) {
		String result = solution("AxAxAxAoBoBoB");
		System.out.println(result);
	}

	public static String solution(String sentence) {
		map = new HashMap<>();
		String answer = null;
		if (sentence.contains(" "))
			return "invalid";

		StringBuilder sb = new StringBuilder();
		parsing(sb, sentence); // 이어져 있는 문장을 단어단위로 나눔

		return sb.toString().trim();

	}

	public static void parsing(StringBuilder s, String sentence) {
		if (sentence.isEmpty())
			return;

		char value = ' ';
		if (map.get(value) == null) {
			
			int firstIdx = 0;
			int nextIdx = 0;
			StringBuilder targetString = null; // 타겟
			StringBuilder restString = null; // 자른 나머지
			// 맨 처음으로 나오는 소문자 찾기
			for (int i = 0; i < sentence.length(); i++) {
				if (sentence.charAt(i) >= 'a' && sentence.charAt(i) <= 'z') {
					firstIdx = i;
					value = sentence.charAt(i);
					break;
				}
			}
			map.put(value, true); //소문자 넣음
			int status = 0;
			// 그 소문자를 기준으로 자르기
			if (firstIdx == 0) // 규칙(수정)
				status = 2;
			else
				status = 1;

			if (status == 1) {
				int count = 0;
				for (int i = 0; i < sentence.length(); i++) {
					if (value == sentence.charAt(i))
						count++;
					if (count > 2)
						break;
				}
				if (count < 2)
					status = 2;
			}
			if (status == 1) {
				for (int i = firstIdx + 1; i < sentence.length(); i++) {
					if (sentence.charAt(i) == value) {
						nextIdx = i;
						break;
					}
				}

				int diff = nextIdx - firstIdx; // 차이
				int tmpCurrentIdx = firstIdx;
				int tmpNextIdx = tmpCurrentIdx + diff;
				while (tmpNextIdx < sentence.length()) {
					if (sentence.charAt(tmpCurrentIdx) == sentence.charAt(tmpNextIdx)) {
						tmpCurrentIdx = tmpNextIdx;
						tmpNextIdx = tmpCurrentIdx + diff;
					} else
						break;
				}
				if (tmpNextIdx >= sentence.length())
					tmpNextIdx = sentence.length() - 1;
				targetString = new StringBuilder(sentence.substring(firstIdx - 1, tmpNextIdx)); // 자름
				String tmp = targetString.toString();
				tmp = tmp.replaceAll(Character.toString(value), ""); // 소문자 없앰
				targetString = new StringBuilder(tmp);

				if (tmp.matches(".*[a-z].*")) {
					// 소문자가 존재하는 경우
					parsing(s, tmp);
				}
				StringBuilder sb = new StringBuilder(sentence);
				restString = sb.delete(firstIdx - 1, tmpNextIdx);
			} else {
				// 규칙 2인 경우
				for (int i = firstIdx + 1; i < sentence.length(); i++) {
					if (sentence.charAt(i) == value) {
						nextIdx = i;
						break;
					}
				}

				targetString = new StringBuilder(sentence.substring(firstIdx, nextIdx + 1));
				StringBuilder sb = new StringBuilder(sentence);
				restString = sb.delete(firstIdx, nextIdx + 1);

				if (firstIdx != 0) {
					// swap
					String tmp = targetString.toString();
					targetString = restString;
					restString = new StringBuilder(tmp);
				}
				String tmp = targetString.toString();
				tmp = tmp.replaceAll(Character.toString(value), ""); // 소문자 없앰
				targetString = new StringBuilder(tmp);

				if (tmp.matches(".*[a-z].*")) {
					// 소문자가 존재하는 경우
					parsing(s, tmp);
				}

			}

			s.append(targetString);
			s.append(" ");
			parsing(s, restString.toString()); // 나머지를 파싱
		}
		else
		{
			//소문자가 중복되는 경우
			s.delete(0, s.length());
			s.append("invalid");
		}
	}
}
