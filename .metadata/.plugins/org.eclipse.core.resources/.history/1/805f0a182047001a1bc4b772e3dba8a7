package samsung;

//아기 상어
import java.util.*;
import java.io.*;

public class problem_16236 {
	static int[][] board;
	static int[][] sharkSize;
	static int[][] map;
	static boolean[][] visited;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int N = Integer.parseInt(br.readLine());

		map = new int[N][N];
		board = new int[N][N];
		visited = new boolean[N][N];
		sharkSize = new int[N][N];

		StringTokenizer st = null;
		int startX = 0, startY = 0;
		int count =0 ;
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				int tmp = Integer.parseInt(st.nextToken());
				if (tmp == 9) {
					startX = i;
					startY = j;
				}
				else if(tmp != 0 && tmp <= 2)
					count++;
				map[i][j] = tmp;
			}
		}
		
		if(count == 0)
			System.out.println(0);
		else
			bfs(startX,startY);
	}

	private static void bfs(int x, int y) {
		Queue<List<Integer>> queue = new LinkedList<>();
		int[] ud = { -1, 0, 1, 0 };
		int[] rl = { 0, -1, 0, 1 };

		sharkSize[x][y] = 2;
		visited[x][y] = true;

		for (int i = 0; i < 4; i++) {
			int nx = x + ud[i];
			int ny = y + rl[i];

			if (nx < 0 || nx >= map.length || ny < 0 || ny >= map.length) {
				continue;
			}

			if (map[nx][ny] <= sharkSize[x][y]) {
				if (map[nx][ny] == sharkSize[x][y])
					sharkSize[nx][ny] = sharkSize[x][y] + 1; // 크기 증가
				else
					sharkSize[nx][ny] = sharkSize[x][y];

				board[nx][ny] = board[x][y] + 1;
				List<Integer> list = new ArrayList<>();
				list.add(nx);
				list.add(ny);
				queue.add(list);
			}
		}

		while (!queue.isEmpty()) {
			List<Integer> current = queue.poll();
			int cx = current.get(0);
			int cy = current.get(1);

			if (!visited[cx][cy]) {
				visited[cx][cy] = true;

				for (int i = 0; i < 4; i++) {
					int nx = cx + ud[i];
					int ny = cy + rl[i];

					if (nx < 0 || nx >= map.length || ny < 0 || ny >= map.length) {
						continue;
					}

					if (!visited[nx][ny]) {
						if (map[nx][ny] <= sharkSize[cx][cy]) {
							if (map[nx][ny] == sharkSize[cx][cy])
								sharkSize[nx][ny] = sharkSize[cx][cy] + 1; // 크기 증가
							else
								sharkSize[nx][ny] = sharkSize[cx][cy];

							board[nx][ny] = board[cx][cy] + 1;
							List<Integer> list = new ArrayList<>();
							list.add(nx);
							list.add(ny);
							queue.add(list);
						}
					}
				}
			}
		}
		
		int answer =0 ;
		for(int i =0 ; i< map.length ;i++) {
			for(int j =0 ; j< map.length ; j++) {
				answer = Math.max(answer, board[i][j]);
			}
		}
		
		System.out.println(answer);
	}
}
