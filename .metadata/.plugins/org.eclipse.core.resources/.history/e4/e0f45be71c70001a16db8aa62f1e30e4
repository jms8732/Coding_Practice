package bitmask;

//종이 조각
import java.util.*;
import java.io.*;

public class problem_14391 {
	static char map[][];
	static boolean[][] combination;

	static int answer = -1;
	static int N, M;

	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st =new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		map = new char[N][M];
		combination = new boolean[N][M];

		for (int i = 0; i < N; i++) {
			String tmp = br.readLine()
			for (int j = 0; j < M; j++) {
				map[i][j] = tmp.charAt(j);
			}
		}
		
		makeCombination(0);
	}

	private static void makeCombination(int depth) {
		if (depth == N) {
			boolean[][] visited = new boolean[N][M];
			findMax(visited,0);
		}

		// 현재 위치의 조합 찾기
		for (int i = 0; i < (1 << M); i++) {
			checkCombination(depth, i);
			makeCombination(depth + 1);
		}
	}

	private static void findMax(boolean[][] visited, int value) {
		if (isCompleted(visited)) {
			answer = Math.max(answer, value);
			return;
		}

		boolean[][] tmpVisited = visited.clone();

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (!visited[i][j]) {
					int tmp = makeHorizon(i, j, visited);
					findMax(visited, value + tmp);

					visited = tmpVisited;
					tmp = makeVertical(i,j,visited);
					findMax(visited,value+tmp);
					
					visited= tmpVisited;
				}
			}
		}
	}
	
	private static int makeVertical(int x, int y, boolean [][] visited) {
		StringBuilder sb = new StringBuilder();
		
		for(int j = y ; j < M ; j++) {
			for(int i = x; i< N ; i++) {
				if(!visited[i][j]) {
					visited[i][j] = true;
					sb.append(map[i][j]);
				}
			}
		}
		
		return Integer.parseInt(sb.toString());
	}

	private static int makeHorizon(int x, int y, boolean[][] visited) {
		StringBuilder sb = new StringBuilder();
		for (int i = x; i < N; i++) {
			for(int j = y ; j < M ; j++) {
				if(!visited[i][j]) {
					visited[i][j] = true;
					sb.append(map[i][j]);
				}
			}
		}
		
		return Integer.parseInt(sb.toString());
	}

	private static boolean isCompleted(boolean[][] visited) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (!visited[i][j])
					return false;
			}
		}

		return true;
	}

	private static void checkCombination(int depth, int bit) {
		for (int i = 0; i < M; i++) {
			if ((bit & 1 << i) == 1)
				combination[depth][i] = true;
		}
	}
}
