package combination;


//RGB °Å¸®
import java.io.*;
import java.util.*;

public class problem_1149 {
	static int [][] map;
	static int small = Integer.MAX_VALUE; //ÃÖ¼Ú°ª
	static int N;
	static Set<Integer> set;
	public static void main(String[] args) throws IOException  {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		map = new int[N][3];
		set = new HashSet<>();
		set.add(0);
		set.add(1);
		set.add(2);
		
		Iterator<Integer> key = set.iterator();
		
		while(key.hasNext()) {
			int idx = key.next();
			Set<Integer> tmpTotal = new HashSet<>(set);
			Set<Integer> tmpSet = new HashSet<>();
			tmpSet.add(idx);
			
			tmpTotal.removeAll(tmpSet);
			dfs(tmpTotal,1,0);
		}
	
		System.out.println(small);
	}
	
	private static void dfs(Set<Integer> set, int depth,int value) {
		if(depth == N) {
			small = Math.min(small, value);
		}
		
		Iterator<Integer> key = set.iterator();
		
		while(key.hasNext()){
			int idx = key.next();
			Set<Integer> tmpTotal = new HashSet<>(set);
			Set<Integer> tmpSet = new HashSet<>();
			tmpSet.add(idx);
			
			tmpTotal.removeAll(tmpSet);
			dfs(tmpTotal,depth+1,value+idx);
		}
		
	}
}
