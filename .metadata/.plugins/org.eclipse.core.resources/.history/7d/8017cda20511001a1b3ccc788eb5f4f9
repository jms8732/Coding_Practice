package samsung;
//로봇 청소기

import java.util.*;
import java.io.*;
public class problem_14503 {
	static int map[][];
	static int rl[] = {0,-1,0,1}; //동쪽 서쪽
	static int ud[] = {-1,0,1,0}; //북쪽 남쪽
	static boolean visited[][]; //로봇이 청소했는가를 판단하는 이차원 배열
	static int robotX,robotY; //로봇 좌표
	static boolean diactivate;
	static int count; //로봇이 청소한 구역
	
	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		try {
			st = new StringTokenizer(br.readLine()); //읽어들임
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			map = new int[x][y]; //맵 생성
			visited = new boolean[x][y];
			
			st = new StringTokenizer(br.readLine()); //다음 라인 읽어드림
			robotX = Integer.parseInt(st.nextToken());
			robotY = Integer.parseInt(st.nextToken());
			
			int direction = Integer.parseInt(st.nextToken()); //방향
			
			//맵 값 넣기
			for(int i =0 ; i< x ; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j= 0 ; j< y ;j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			
			dfs(robotX,robotY,direction);
			
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
	
	private static void dfs(int x,int y, int direction) {
		if(!visited[x][y]) {
			//청소 되지 않는 곳이면
			count++;
			visited[x][y] = true;
		}
		int initalDirection = direction;
		for(int i = direction +1; i< 5 ; i++) {
			//북->서->남->동 (현재 방향을 기준으로 왼쪽 방향으로 부터 차례대로 탐색 진행)
			if(diactivate) 
				return; 
			int nx = x+ud[i % 4];
			int ny = y+rl[i % 4];
			if(nx >= map.length || nx <0 || ny >= map[nx].length || ny < 0) //map의 범위를 벗어 날 경우
				continue;
			
			switch(which(nx,ny,i % 4,initalDirection)) {
			case 1:
			{
				dfs(nx,ny,i %4); //회전한 다음 한 칸을 전진
				break;
			}
			case 2:
			{
				//그 방향으로 회전하고 2번으로 돌아간다. (전진은 안함)
				nx =x;
				ny = y;
				break;
			}
			case 3:
			{
				return; //바라보는 방향을 유지한 채로 한 칸 후진
			}
			case 4:
			{
				diactivate = true;
				return;
			}
			}
		}
	}
	
	private static int which(int x,int y, int direction, int initalDirection) {
		if(!visited[x][y] && map[x][y] != 1) {
			//a. 왼쪽 방향에 청소하지 않은 공간
			return 1;
		}else if(initalDirection == direction) {
			//c,d. 네 방향 모두 청소가 이미 되어있거나 벽
			if(x+1 >= map.length || x-1 < 0 || y + 1 >= map[x].length || y -1 < 0)
				return 4;
			
			boolean check = false;
			
			//뒤에 벽이 있는 경우를 확인
			switch(direction) {
			case 0://북쪽 일 경우
				if(map[x+1][y] ==1)
					check = true;
				break;
			case 1: //서쪽 일 경우
				if(map[x][y+1] == 1)
					check =  true;
				break;
			case 2://남쪽 일 경우
				if(map[x-1][y] == 1)
					check = true;
				break;
			case 3://동쪽 일 경우
				if(map[x][y-1] == 1)
					check = true;
				break;
			}
			
			if(!check)
				return 3;
			else
				return 4;
		}else
			return 2;
	}
}
