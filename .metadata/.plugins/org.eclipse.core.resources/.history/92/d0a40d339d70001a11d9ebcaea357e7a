package bitmask;

//종이 조각
import java.util.*;
import java.io.*;

public class problem_14391 {
	static char map[][];
	static boolean[][] combination;

	static int answer = -1;
	static int N, M;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new char[N][M];
		combination = new boolean[N][M];

		for (int i = 0; i < N; i++) {
			String tmp = br.readLine();
			for (int j = 0; j < M; j++) {
				map[i][j] = tmp.charAt(j);
			}
		}
		
		System.out.println(answer);
	}
	private static void makeCombination(int depth,boolean [][] visited) {
		if(isCompleted(visited)) {

		}
		
		boolean [][] tmpVisited = new boolean[N][M];
		copyArray(visited,tmpVisited);
		
		for(int i =0 ; i < N ; i++) {
			for(int j =0 ; j < M ; j++) {
				if(!visited[i][j]) {
					
				}
			}
		}
	}
	private static int horizon(int x, int y, boolean[][]visited) {
		StringBuilder sb= new StringBuilder();
		
		for(int i = y ; i < M ; i++) {
			if(!visited[x][i]) {
				visited[x][i] = true;
				sb.append(map[x][i]);
			}
		}
		
		return Integer.parseInt(sb.toString());
	}
	
	private static int vertical(int x, int y, boolean[][] visited) {
		StringBuilder sb  = new StringBuilder();
		for(int i = x ; i < N ; i++) {
			if(!visited[i][y]) {
				visited[i][y] = true;
				sb.append(map[i][y]);
			}
		}
		
		
		return Integer.parseInt(sb.toString());
	}
	
	
	private static void copyArray(boolean [][] src , boolean [][] dest) {
		int idx =0 ;
		for(boolean [] tmp : src) {
			System.arraycopy(tmp, 0, dest[idx++], 0, tmp.length);
		}
	}
	
	private static boolean isCompleted(boolean [][] visited) {
		for(int i =0 ; i < N ; i++) {
			for(int j =0  ; j < M ; j++) {
				if(!visited[i][j])
					return false;
			}
		}
		
		return true;
	}
}
