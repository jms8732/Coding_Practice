package combination;

//N-Queen
import java.io.*;

public class problem_9663 {
	static int count = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		long start = System.currentTimeMillis();
		int result = solution(Integer.parseInt(br.readLine()));
		long end = System.currentTimeMillis();
		System.out.println("time : " + (end - start) / 1000.0);
		System.out.println(result);
	}

	public static int solution(int n) {
		boolean[] map = new boolean[n];
		int depth = 0;
		dfs(depth, n, map);
		return count;
	}

	private static void dfs(int depth, int n, boolean[] map) {
		if (depth == n) {
			// 퀸의 개수가 n개가 된 경우, 경우의 수를 증가시킨다.
			count++;
			return;
		}
		boolean[] tmpMap = new boolean[n];

		copyMap(map, tmpMap); // 채우기 이전의 모습

		for(int i =0 ; i< map.length; i++) {
			if(!map[i]) {
				map[i] = true;
				int left = i -1;
				int right = i +1;
				if(left >= 0)
					map[left] = true;
				if(right < map.length)
					map[right]= true;
				dfs(depth+1,n,map);
				copyMap(tmpMap,map);
			}
		}
	}

	private static void copyMap(boolean[]src, boolean[] target) {
		System.arraycopy(src, 0, target, 0, src.length);
	}

}
