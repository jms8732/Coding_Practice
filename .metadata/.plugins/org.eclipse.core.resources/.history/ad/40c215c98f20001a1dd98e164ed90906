package combination;


//RGB °Å¸®
import java.io.*;
import java.util.*;

public class problem_1149 {
	static int [][] map;
	static int small = Integer.MAX_VALUE; //ÃÖ¼Ú°ª
	static int N;
	public static void main(String[] args) throws IOException  {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		map = new int[N][3];
		
		for(int i =0 ; i < 3;  i++) {
			st =new StringTokenizer(br.readLine());
			for(int  j=0 ; j <N ; j++) {
				map[i][j]= Integer.parseInt(st.nextToken());
			}
		}
		
		int [] array = {1,2,3};
		
		dfs(array,0,array.length,array.length);
		
		System.out.println(small);
	}
	
	private static void dfs(int [] array, int depth, int n ,int r) {
		if(depth == r)
		{
			calculate(array);
			return;
		}
		for(int i = depth; i < n ; i ++) {
			swap(array,depth,i);
			dfs(array,depth+1,n,r);
			swap(array,depth,i);
		}
	}
	
	private static void swap(int [] array,int depth, int i) {
		int tmp = array[depth];
		array[depth] = array[i];
		array[i] = tmp;
	}
	
	private static void calculate(int [] array) {
		int sum = 0;
		for(int i =0 ; i< N ; i++) {
			int idx = array[i% array.length] -1;
			sum += map[idx][N];
		}
		small = Math.min(small, sum);
	}
}
