package programmers;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Comparator;

//가장 먼 노드

public class problem_51 {
	static int count = 0;

	public static void main(String[] args) {
		int[][] edge = { { 3, 6 }, { 4, 3 }, { 3, 2 }, { 1, 3 }, { 1, 2 }, { 2, 4 }, { 5, 2 } };
		int result = solution(6, edge);
		System.out.println(result);
	}

	public static int solution(int n, int[][] edge) {
		int big = 0;
		// map parsing

		int[] parent = new int[n];
		int[] countTmp = new int[n];
		for (int i = 0; i < parent.length; i++) {
			parent[i] = i;
		}
		Arrays.sort(edge, new Comparator<int[]>() {

			@Override
			public int compare(int[] arg0, int[] arg1) {
				// TODO Auto-generated method stub
				if(arg0[0] < arg1[0]) //x좌표를 대상으로 오름차순 정렬
					return -1;
				else
					return 1;
			}
			
		});
		for (int i = 0; i < edge.length; i++) {
			int x = edge[i][0] -1;
			int y = edge[i][1] -1;
			if (isCircle(parent, x, y)) {
				int parent1 = parent[x];
				int parent2 = parent[y];
				if (parent1 < parent2) {
					parent[parent2] = find(parent, x);
					countTmp[parent2] = count;
				} else {
					parent[parent1] = find(parent, y);
					countTmp[parent1] = count;
				}
				big = Math.max(count, big); // 큰 값
				count = 0;
			}
		}

		int answer = 0;
		for (int i = 0; i < countTmp.length; i++)
			if (big == countTmp[i])
				answer++;

		return answer;

	}

	public static int find(int[] parent, int idx) {
		count++;
		if (parent[idx] == idx)
			return idx;
		else {
			return union(parent, parent[idx]);
		}
	}

	public static boolean isCircle(int[] parent, int idx1, int idx2) {
		int parent1 = find(parent,parent[idx1]);
		int parent2 = find(parent,parent[idx2]);

		if (parent1 == parent2) // circle이 발생한다.
			return false;

		return true;
	}
}
