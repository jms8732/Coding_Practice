package samsung;

//큐빙
import java.util.*;
import java.io.*;

public class problem_5373 {
	static char[][] U = { { 'w', 'w', 'w' }, { 'w', 'w', 'w' }, { 'w', 'w', 'w' } };
	static char[][] D = { { 'y', 'y', 'y' }, { 'y', 'y', 'y' }, { 'y', 'y', 'y' } };
	static char[][] B = { { 'o', 'o', 'o' }, { 'o', 'o', 'o' }, { 'o', 'o', 'o' } };
	static char[][] L = { { 'g', 'g', 'g' }, { 'g', 'g', 'g' }, { 'g', 'g', 'g' } };
	static char[][] R = { { 'b', 'b', 'b' }, { 'b', 'b', 'b' }, { 'b', 'b', 'b' } };
	static char[][] F = { { 'r', 'r', 'r' }, { 'r', 'r', 'r' }, { 'r', 'r', 'r' } };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int testCase = Integer.parseInt(br.readLine());
		StringTokenizer st = null;

		for (int i = 0; i < testCase; i++) {
			int k = Integer.parseInt(br.readLine());
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < k; j++) {
				String tmp = st.nextToken();
				char dim = tmp.charAt(0);
				char direction = tmp.charAt(1);

				rotation(dim, direction);
			}
		}
	}

	// 회전
	private static void rotation(char dim, char direction) {
		char[][] array = null;
		switch (dim) {
		case 'U':
			array = U;
			break;
		case 'D':
			array = D;
			break;
		case 'B':
			array = B;
			break;
		case 'L':
			array = L;
			break;
		case 'R':
			array = R;
			break;
		case 'F':
			array = F;
			break;

		}
		// 현재 돌릴려는 면을 90도 회전을 먼저 시킨다.
		rotation_angle(array, direction);

		rotation_otherDim(dim, direction);

	}

	// 기준면을 대상으로 연결돼 있는 면들을 가져온 후, 회전
	private static void rotation_otherDim(char d, char direction) {
		switch (d) {
		case 'U':
			char[] b = B[2];
			char[] r = { R[0][0], R[1][0], R[2][0] };
			char[] f = F[0];
			char[] l = { L[0][2], L[1][2], L[2][2] };
			break;
		case 'B':
			break;
		case 'L':

			break;
		case 'R':

			break;
		case 'F':
			break;
		case 'D':

			break;
		}
		rotation_Dim(b, r, f, l, direction);

	}

	private static void rotation_Dim(char[] u, char[] r, char[] d, char[] l, char direction) {
		char[][] array = { u, r, d, l };
		switch (direction) {
		case '-':
			int idx = 0;
			break;
		case '+':
			int idx = 0;
			char[] cur = array[idx++];
			while (true) {
				if (idx == 4)
					break;
				char[] next = array[idx];
				array[(idx++) % 4] = cur;
			}
			break;
		}
	}

	private static void rotation_angle(char[][] dim, char direction) {
		switch (direction) {
		case '-':
			for (int i = 0; i < 2; i++) {
				int startX = i;
				int startY = 0;
				int nx = 0, ny = 0;
				char cur = dim[startX][startY];
				while (true) {
					nx = 2 - startY;
					ny = startX;

					char next = dim[nx][ny];
					dim[nx][ny] = cur;
					cur = next;
					startX = nx;
					startY = ny;

					if (startX == 0 && startY == 0)
						break;
				}
			}
			break;
		case '+':
			for (int i = 0; i < 2; i++) {
				int startX = 0;
				int startY = i;
				int nx = 0, ny = 0;
				char cur = dim[startX][startY];
				while (true) {
					nx = startX;
					ny = 2 - startX;

					char next = dim[nx][ny];
					dim[nx][ny] = cur;
					cur = next;
					startX = nx;
					startY = ny;

					if (startX == 0 && startY == 0)
						break;
				}
			}
			break;
		}

	}
}
