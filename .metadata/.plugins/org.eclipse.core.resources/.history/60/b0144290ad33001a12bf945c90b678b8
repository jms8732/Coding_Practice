package dp;

//평범한 배낭
import java.util.*;
import java.io.*;

public class problem_12865 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Set<Integer> set = new TreeSet<>(); //중복 제거 
		StringTokenizer st = new StringTokenizer(br.readLine());

		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		List<Node> list[] = new ArrayList[101];
		for (int i = 1; i < list.length; i++)
			list[i] = new ArrayList<>();
		// 값 할당
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int w = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int sum =0;
			int idx= 1;
			for(int j = 0; j < list[w].size() ; j++) {
				sum += list[w].get(j).value;
				idx++;
			}
			set.add(w);
			list[w].add(new Node(sum,idx*w));
		}
		
		List<Integer> value = new ArrayList<>(set);
		
		int [][] dp = new int[value.size()][K+1];
		for(int i = 0 ; i < list[value.get(0)].size();i++) {
			int idx = list[value.get(0)].get(i).idx;
			int v = list[value.get(0)].get(i).value;
			dp[0][idx]=v;
		}
		
		for(int i = 1 ; i< dp.length ; i++) {
			System.arraycopy(dp[i-1], 0, dp[i], 0, value.get(i)); //현재 위치 이전까지 값 복사
			int listIdx = value.get(i);
			for(int j = 0 ; j< list[listIdx].size() ; j++) {
				int currentIdx = list[listIdx].get(j).idx;
				int currentValue = list[listIdx].get(j).value;
				dp[i][currentIdx] = Math.max(dp[i-1][currentIdx], currentValue);
				for(int k = currentValue+1 ; k <= K ; k++) {
					dp[i][k] = Math.max(dp[i][k], Math.max(dp[i-1][k], currentValue+dp[i-1][k-currentValue]));
				}
			}
		}
		
		System.out.println(dp[value.size()-1][K]);
		
	}
	private static class Node implements Comparable<Node>{
		int value, idx;
		public Node(int v, int i) {
			this.value = v;
			this.idx = i;
		}
		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			if(this.value < o.value)
				return -1;
			else
				return 1;
		}
		
	}
}
