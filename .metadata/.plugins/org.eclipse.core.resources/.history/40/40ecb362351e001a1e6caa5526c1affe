package combination;
//단어 수학

import java.util.*;
import java.io.*;

public class problem_1339 {
	static boolean[] visited; // 중복 방지
	static String[] s;
	static int min;
	static HashMap<Character,Integer> map;
	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Set<Character> set = new HashSet<>();
		try {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			s = new String[N];
			map =new HashMap<>();
			for (int i = 0; i < N; i++) {
				// N만큼 돌아서 string의 문자들로 집합 형성
				String tmp = br.readLine();
				s[i] = tmp;
				for (int j = 0; j < tmp.length(); j++) {
					set.add(tmp.charAt(j)); // 문자 삽입
				}
			}
			int size = set.size();
			visited = new boolean[10]; // 집합의 크기만큼 배열 선언
			min = 10 - size; // 최소값

			int result = 0;
			int sum = 0;
			for(int i= 9 ; i >= min ; i--) {
				int tmp = 0;
				visited[i] = true;
				for(int j = 0 ; j<s.length ; j++) {
					String goal = s[j]; 
					char c = goal.charAt(0);
					StringBuilder sb = new StringBuilder(c);
					tmp += dfs(sb,goal,1);
				}
				visited[i] = false;
				sum = Math.max(sum, tmp);
			}
			
			System.out.println(result);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	private static int dfs(StringBuilder sb, String goal,int idx) {
		if(goal.length()== sb.length()) {
			//만들어진 숫자를 반환한다.
			int tmp = Integer.parseInt(sb.toString());
			return tmp;
		}
		int result = 0;
		
		for(int i = 9;  i >= min ; i--) {
			//최댓값을 구해야하므로 9부터 시작한다.
			char c = goal.charAt(idx);
			if(map.containsKey(c)) {
				//해당 key값이  존재하면
				result = Math.max(result,dfs(sb.append(map.get(c)),goal,idx+1));
			}else {
				if(!visited[i]) {
					visited[i] = true;
					result = Math.max(result, dfs(sb.append(i),goal,idx+1));
					visited[i]= false;
				}
			}
			
		}
		
		return result;
	}

}
