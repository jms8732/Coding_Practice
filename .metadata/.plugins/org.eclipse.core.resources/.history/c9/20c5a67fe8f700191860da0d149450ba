package programmers;

import java.sql.Timestamp;
//[1차] 추석 트레픽
import java.util.*;

public class problem_11 {
	public static void main(String[] args) {
		String[] tmp = { "2016-09-15 01:00:04.002 2.0s",
				"2016-09-15 01:00:07.000 2s"
};
		int result = solution(tmp);
		System.out.println(result);
	}

	public static int solution(String[] lines) {
		Vector<TimeStamp> waitingArray = new Vector<>();
		Vector<TimeStamp> processingArray = new Vector<>();

		int big = 0;
		double start = 1000000000, end = 0;
		for (int i = 0; i < lines.length; i++) {
			String[] tmp = lines[i].split(" "); // 공백으로 자른다.
			TimeStamp ts = makeTime(tmp[1], tmp[2]);
			start = Math.min(start, (double) ts.start);
			end = Math.max(end, (double) ts.end);
			waitingArray.add(ts); // 만들어서 추가
		}

		Vector<TimeStamp> tmp = new Vector<>();
		for (double i = start; i <= end; i += 0.001) {
			copyArray(tmp, waitingArray);
			for (TimeStamp ts : tmp) {
				if (i >= ts.start) {
					processingArray.add(ts); // 진행중으로 변환
					waitingArray.remove(ts); // 대기중에서 삭제
				}
			}

			double startTime = i + 1; //현재 시간에서 1sec 더함
			// 1초안에 얼만큼 겹쳐있나 확인
			for (TimeStamp outerTs : processingArray) {
				int count = 1;
				for (TimeStamp innerTs : waitingArray) {
					if (startTime >= innerTs.start)
						count++;
				}
				outerTs.count = (int) Math.max(outerTs.count, count);
				big = (int) Math.max(outerTs.count, big);
			}

			copyArray(tmp, processingArray);

			// 시간 다되면 제거
			for (TimeStamp ts : tmp) {
				if (i >= ts.end)
					processingArray.remove(ts);
			}

		}
		return big;
	}

	public static void copyArray(Vector dest, Vector src) {
		dest.clear();
		for (int i = 0; i < src.size(); i++) {
			dest.add(src.get(i));
		}
	}

	public static TimeStamp makeTime(String time, String duration) {

		StringBuilder sb = new StringBuilder(duration);
		sb = sb.deleteCharAt(duration.length() - 1); // s문자 제거
		double sec = Double.parseDouble(sb.toString()); // string to double

		time = time.replaceAll(":", ""); // 시간 단위 없앰
		double tmpTime = Double.parseDouble(time);
		double start = tmpTime - sec + 0.001;
		double end = tmpTime;

		return new TimeStamp(start, end, false, 1);
	}
}

class TimeStamp {
	double start, end;
	boolean status;
	int count;

	public TimeStamp(double start, double end, boolean status, int count) {
		this.start = start;
		this.end = end;
		this.status = status;
		this.count = count;
	}
}