package programmers1;
//배달

import java.util.*;

public class problem_21 {
	public static void main(String[] args) {
		int[][] road = {{1,2,1},{2,3,3},{5,2,2},{1,4,2},{5,3,1},{5,4,2}};
		int result = solution(5,road,3);
		System.out.println(result);
	}

	public static int solution(int N, int[][] road, int K) {
		int answer = 0;
		List<Node> list[] = new ArrayList[N];
		int [] dist = new int[N];
		PriorityQueue<Node> pq = new PriorityQueue<>();
		
		Arrays.fill(dist,Integer.MAX_VALUE); //dist에 INF값을 채움
		dist[0] = 0;
		
		for(int i =0 ; i< N ; i++) list[i] = new ArrayList<>();
		
		for(int i =0 ; i< road.length ; i++) {
			int s = road[i][0]-1;
			int f = road[i][1]-1;
			int w = road[i][2];
			
			list[s].add(new Node(f,w));
		}
		
		pq.add(new Node(0,0));
		
		while(!pq.isEmpty()) { //다익스트라 알고리즘
			Node tmp = pq.poll();
			int current = tmp.cur;
			for(Node next : list[current]) {
				if(dist[next.cur] > dist[current] + next.weight)
				{
					dist[next.cur] = dist[current] + next.weight;
					pq.add(new Node(next.cur,dist[next.cur]));
				}
			}
		}
		
		for(int i = 0; i< dist.length ; i++) { //시간내에 도달할 수 있는 지역 찾기
			if(dist[i] <= K) {
				answer++;
			}
		}
		
		return answer;
	}
	private static class Node{
		int cur = 0;
		int weight= 0;
		
		public Node(int current, int weight) {
			this.cur = current;
			this.weight = weight;
		}
	}
}
