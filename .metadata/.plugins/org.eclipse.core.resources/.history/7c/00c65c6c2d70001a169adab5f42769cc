package bitmask;

//종이 조각
import java.util.*;
import java.io.*;

public class problem_14391 {
	static char map[][];
	static boolean[][] combination;

	static int answer = -1;
	static int N, M;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new char[N][M];
		combination = new boolean[N][M];

		for (int i = 0; i < N; i++) {
			String tmp = br.readLine();
			for (int j = 0; j < M; j++) {
				map[i][j] = tmp.charAt(j);
			}
		}
		
		System.out.println(answer);
	}
	private static void makeCombination(int depth) {
		if(depth == N) {
			boolean [][] visited = new boolean[N][M];
			for(int i = 0 ; i< N ; i++) {
				for(int j =0 ; j < M ; j++) {
					StringBuilder sb = new StringBuilder();
					if(!visited[i][j]) {
						makeInteger(sb,i,j);
					}
				}
			}
		}
		
		for(int i =0 ; i< (1<<M) ; i++) {
			checkCombination(depth,i);
		}
		
	}
	
	private static void checkCombination(int depth, int bit) {
		for(int i =0 ; i< M ; i++) {
			if((bit & 1<<i) == 1)
				combination[depth][i] = true;
		}
	}


	private static int makeVertical(int x, int y, boolean[][] visited) {
		StringBuilder sb = new StringBuilder();

		boolean current = combination[x][y];

		for (int j = x; j < N; j++) {
			if (!visited[j][y] && current == combination[j][y]) {
				visited[j][y] = true;
				sb.append(map[j][y]);
			}

		}

		return Integer.parseInt(sb.toString());
	}

	private static void makeInteger(StringBuilder sb , int x, int y,boolean[][] visited) {
		if(combination[x][y]) {
			//방향이 가로방향인 경우
			for(int i = y ; i < M ; i++) {
				if(!visited[x][i]) {
					visited[x][i] = true;
					sb.append(map[x][i]);
				}
			}
		}
		else {
			//방향이 세로방향인 경우
		}
	}
}
