package search_algorithm;

//텀 프로젝트
import java.util.*;
import java.io.*;

public class problem_9466 {
	static int count = 0;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int c = Integer.parseInt(st.nextToken());

		for (int i = 0; i < c; i++) {
			int M = Integer.parseInt(br.readLine());
			boolean [] visited = new boolean[M];
			boolean [] circle = new boolean[M];
			int [] edge = new int[M];
			
			st = new StringTokenizer(br.readLine());
			
			//값 초기화
			for(int j =0 ;j < M ; j++) {
				edge[j] = Integer.parseInt(st.nextToken()) -1;
			}
			
			for(int j =0 ; j < edge.length ; j++) {
				if(!visited[j]) {
					visited[j] = true;
					dfs(edge,j,visited,circle);
				}
			}
			int answer = circle.length;
			answer -= count;
			System.out.println(answer);
			count =0;
		}
	}
	
	private static void dfs(int [] edge, int current, boolean [] visited, boolean[] circle) {
		
		int next = edge[current];
		
		if(circle[next])
			return;
		
		if(!visited[next]) {
			visited[next] = true;
			dfs(edge,next,visited,circle);
		}else {
			for(int i = next ; next != edge[i] ; i = edge[i]) {
				count++;
				circle[i] = true;
			}
			count++;
			circle[current] = true;
		}
	}
}
