package programmers;

//2018 kakao blind test [1차] 뉴스 클러스터링
import java.util.*;

public class problem_40 {
	public static void main(String[] args) {
		String t1= "FRANCE";
		String t2 = "french";
		int result = solution(t1,t2);
		System.out.println(result);
	}

	public static int solution(String str1, String str2) {
		HashMap<String,Integer> pair1 = new HashMap<>(); //str1를 저장하기 위한 map
		HashMap<String,Integer> pair2 = new HashMap<>(); //str2를 저장하기 위한 map
		
		//parsing
		str1 = str1.toLowerCase(); //대소문자 구문을 없애기 위해
		str2 = str2.toLowerCase(); 
		for(int i =0 ; i < str1.length() ; i++) {
			if(str1.charAt(i) >= 'a' && str1.charAt(i) <= 'z') {
				//해당 문자가 문자일 경우
				StringBuilder sb = new StringBuilder();
				if(i+1 >= str1.length())
					break;
				char next = str1.charAt(i+1); //다음 문자도 확인
				if(next >= 'a' && next <= 'z') {
					int count = 1 ;
					sb.append(str1.charAt(i)).append(next); //붙인다.
					if(pair1.get(sb.toString()) == null)
						pair1.put(sb.toString(), 1);
					else {
						count = pair1.get(sb.toString());
						pair1.put(sb.toString(), count+1);
					}
				}else //다음 문자가 특수문자일 경우
					i++;
			}
			else
			{
				//특수 문자일 경우
				i++; //건너 뛴다.
			}
		}
		
		for(int i =0 ; i < str2.length() ; i++) {
			if(str2.charAt(i) >= 'a' && str2.charAt(i) <= 'z') {
				//해당 문자가 문자일 경우
				StringBuilder sb = new StringBuilder();
				if(i+1 > str2.length())
					break;
				char next = str2.charAt(i+1); //다음 문자도 확인
				if(next >= 'a' && next <= 'z') {
					int count = 1 ;
					sb.append(str2.charAt(i)).append(next); //붙인다.
					if(pair2.get(sb.toString()) == null)
						pair2.put(sb.toString(), 1);
					else {
						count = pair2.get(sb.toString());
						pair2.put(sb.toString(), count+1);
					}
				}else //다음 문자가 특수문자일 경우
					i++;
			}
			else
			{
				//특수 문자일 경우
				i++; //건너 뛴다.
			}
		}
		
		int union =0 ;
		if(pair1.size() > pair2.size())
		{
			Iterator it = pair1.keySet().iterator();
			while(it.hasNext()) {
				String key = (String)it.next();
				int count1 = pair1.get(key);
				int count2 = pair2.get(key);
				
				union += Math.max(count1, count2);
			}
		}
		else {
			Iterator it = pair2.keySet().iterator();
			while(it.hasNext()) {
				String key = (String)it.next();
				int count1 = pair1.get(key);
				int count2 = pair2.get(key);
				
				union += Math.max(count1, count2);
			}
		}
		
		
		return 0;
	}
}
