package search_algorithm;

//MT
import java.util.*;
import java.io.*;

public class problem_10265 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		st = new StringTokenizer(br.readLine());
		int[] array = new int[N];
		boolean[] visited = new boolean[N];
		for (int i = 0; i < N; i++) {
			int tmp = Integer.parseInt(st.nextToken()) - 1;
			if (tmp == i)
				array[i] = -1;
			else
				array[i] = tmp;
		}

		int answer = 0;
		for (int i = 0; i < array.length; i++) {
			answer++;
			if (!visited[i]) {
				visited[i] = true;
				if (!dfs(answer, array[i], K, array))
					answer = 0;
				visited[i] = false;
			}
		}

		System.out.println(answer);
	}

	private static boolean dfs(int depth, int current, int limit, int[] array) {
		if (depth > limit)
			return false;

		if (current == -1)
			return true;

		boolean check = false;
		int next = array[current];
		check = dfs(depth + 1, next, limit, array);

		return check;
	}
}
