package programmers;

//라면 공장
import java.util.*;;

public class problem_50 {
	public static void main(String[] args) {
		int[] tmp = { 1, 4, 10, 15 };
		int[] supp = { 8, 10, 5, 10 };

		int result = solution(4, tmp, supp, 30);
		System.out.println(result);
	}

	public static int solution(int stock, int[] dates, int[] supplies, int k) {
		int answer = 0;
		PriorityQueue<Node> dayList = new PriorityQueue<>();

		for (int i = 0; i < dates.length; i++) {
			dayList.add(new Node(dates[i], supplies[i], stock));
		}
		List<Node> restList = new ArrayList<>();

		while (!dayList.isEmpty()) {
			while (!dayList.isEmpty()) {
				if (dayList.peek().day <= stock) {
					Node tmp = dayList.poll();
					tmp.stock = stock; // 현재 존속할 수 있는 밀가루의 개수
					restList.add(tmp);
				} else
					break;
			}

			restList.sort(new Comparator<Node>() {

				@Override
				public int compare(Node o1, Node o2) {
					// TODO Auto-generated method stub
					int o1Sum = o1.stock - o1.day + o1.rest;
					int o2Sum = o2.stock - o2.day + o2.rest;
					o1.stock = o1Sum;
					o2.stock = o2Sum;
					if (o1Sum < o2Sum)
						return 1;
					else if (o1Sum == o2Sum) {
						if (o1.day < o2.day)
							return -1;
						else
							return 1;
					} else
						return -1;

				}

			});
			dayList.addAll(restList.subList(1, restList.size()));
			stock += restList.get(0).stock;
			answer++;
			restList.clear();
			if (stock >= k - 1)
				break;
		}

		return answer;

	}

	public static class Node implements Comparable<Node> {
		int day, rest, stock;

		public Node(int d, int r, int s) {
			this.day = d;
			this.rest = r;
			this.stock = s;
		}

		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			if (this.day < o.day)
				return -1;
			else
				return 1;
		}

	}

}
