package samsung;

//스타트와 링크
import java.util.*;
import java.io.*;
public class problem_14889 {
	static int N;
	static int map[][];
	static Set<Integer> totalSet;
	static Set<Integer> partialSet;
	static int diff = Integer.MAX_VALUE;
	
	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		try {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());  //N
			map = new int[N][N];
			totalSet = new HashSet<>();
			partialSet = new HashSet<>(); //부분 집합
			//전체 집합에 값 넣기
			for(int i =0 ; i< N ; i++) {
				totalSet.add(i);
			}
			
			for(int i =0 ; i< N ; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j =0 ; j< N ; j++) {
					map[i][j] = Integer.parseInt(st.nextToken()); //map 값 설정
				}
			}
			int count =1;
			for(int i =0 ; i < N ; i++) {
				partialSet.add(i);
				dfs(i,i+1,count);
			}
		}catch(IOException e) {
			e.printStackTrace();
		}
		
	}
	
	private static void dfs(int x,int y,int currentIdx) {
		if(currentIdx == N/2) {
			calculate();
			return;
		}
		
		for(int i = y ; i < N ; i++) {
			if(x == i) //i와 j가 같은 경우
				continue;
			partialSet.add(i);
			dfs(x,i+1,currentIdx+1);
			partialSet.remove(i);
		}
	}
	
	private static void calculate() {
		Set<Integer> anotherSet = new HashSet<>(totalSet);
		anotherSet.removeAll(partialSet); //차집합
		int sum1= 0 ,sum2 = 0;
		
		Iterator it = partialSet.iterator();
		
		while(it.hasNext()){
			Set<Integer> tmp = new HashSet<>();
			int x = (int)it.next();
			tmp.add(x);
			Set<Integer> tmp1 = new HashSet<>(partialSet);
			
			tmp1.removeAll(tmp);
			
			Iterator it1 = tmp1.iterator();
			while(it1.hasNext()) {
				int y = (int)it1.next();
				sum1 += map[x][y];
			}
		}
		
		it = anotherSet.iterator();
		
		while(it.hasNext()){
			Set<Integer> tmp = new HashSet<>();
			int x = (int)it.next();
			tmp.add(x);
			Set<Integer> tmp1 = new HashSet<>(anotherSet);
			
			tmp1.removeAll(tmp);
			
			Iterator it1 = tmp1.iterator();
			while(it1.hasNext()) {
				int y = (int)it1.next();
				sum2 += map[x][y];
			}
		}
		
		int di = Math.abs(sum1-sum2);
		diff = Math.min(diff, di);
	}
}
