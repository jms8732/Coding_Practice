package programmers1;

//2020 kakao 자물쇠와 열쇠
import java.util.*;

public class problem_8 {
	public static void main(String[] args) {

	}

	public static boolean solution(int[][] key, int[][] lock) {
		boolean answer = false;
		int count = 0; //lock의 홈 갯수
		
		for(int i =0 ; i< lock.length ;i++) {
			for(int j =0 ; j< lock[i].length ; j++)
				if(lock[i][j] == 0)
					count++;
		}
		
		for(int i = 0 ; i< 3 ; i++) {
			//회전 횟수
			for(int j = -1 ; j< lock.length ; j++) {
				for(int k = -1 ; k < lock.length ; k++) {
					if(isPossible(j,k,key,lock))
						count--;
					
					if(count == 0) {
						answer=  true;
						break;
					}
						
				}
			}
			rotation(key);
		}
		
		return answer;
	}

	public static void rotation(int [][] key) {
		int [][] tmp = new int[key.length][key.length];
		int idx = 0;
		for(int [] t : key) {
			System.arraycopy(t, 0,tmp[idx] , 0, t.length);
			idx++;
		}
		
		for(int i =0 ; i< key.length ; i++) {
			for(int j =0 ; j< key[i].length ; j++) {
				if(key[i][j] == 1) {
					//90 degree rotation
					int nx = j;
					int ny = (key.length - 1 - i);
					key[i][j] = 0;
					tmp[nx][ny] = 1;
				}
			}
		}
		
		key = tmp;
	}
	public static boolean isPossible(int x, int y, int[][] key, int [][] lock) {
		for(int i =0 ; i< key.length ; i++) {
			for(int j = 0 ; j< key.length ; j++) {
				int tmpX = x+i, tmpY = y + j;
				if(tmpX < 0 || tmpY < 0 || tmpX >= lock.length || tmpY >= lock.length)
					continue; //범위를 벗어 난 경우
				
				if(key[i][j] == 1 && lock[tmpX][tmpY] == 1)
					return false; //둘 다 돌기가 존재할 경우
				else if(key[i][j] == 1 && lock[tmpX][tmpY] == 0)
					return true; //열쇠에는 돌기, 자물쇠에는 홈이 존재할 경우
				
				
			}
		}
		
		return false;
	}
}


