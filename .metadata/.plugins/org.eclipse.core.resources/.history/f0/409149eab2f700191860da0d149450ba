package programmers;

//N으로 표현 28.6
import java.util.*;

public class problem_10 {
	public static void main(String[] args) {
		int result = solution(2, 11);
		System.out.println(result);
	}

	static HashSet<Integer> check = new HashSet<Integer>();
	 static ArrayList<Integer>[] cache = new ArrayList[9];
	    
	    public static int add(int left, int right) {
	        return left + right;
	    }
	    
	    public static int sub(int left, int right) {
	        return left - right;
	    }
	    
	    public static int mul(int left, int right) {
	        return left * right;
	    }
	    
	    public  static int div(int left, int right) {
	        if (right == 0) return 0;
	        return left / right;
	    }
	    
	    public static void addCache(int digit, int ret) {
	        if (!check.contains(ret)) {
	            check.add(ret);
	            cache[digit].add(ret);
	        }
	    }
	    
	    public static void cal(int digit, int left, int right) {
	        addCache(digit, add(left, right));
	        addCache(digit, sub(left, right));
	        addCache(digit, mul(left, right));
	        addCache(digit, div(left, right));
	    }
	    
	    public static void init(int N) {
	        int temp = N;
	        for (int i = 1; i < 9; i++) {
	            cache[i] = new ArrayList<Integer>();
	            cache[i].add(temp);
	            temp *= 10;
	            temp += N;
	        }
	    }
	    
	    public static int solution(int N, int number) {
	        
	        if (N==number) {
	            return 1;
	        }
	        
	        int temp = N;
	        for (int i = 1; i < 9; i++) {
	            if (temp == number) return i;
	            cache[i] = new ArrayList<Integer>();
	            cache[i].add(temp);
	            check.add(temp);
	            temp *= 10;
	            temp += N;
	        }
	        
	        for (int digit = 1; digit < 9; digit++) {
	            for (int i = 1; i < digit; i++) {
	                int j = digit - i;
	                for (int left : cache[i]) {
	                    for (int right : cache[j]) {
	                        cal(digit, left, right);
	                        if (check.contains(number)) {
	                            return digit;
	                        }
	                    }
	                }
	            }
	        }
	        return -1;
	    }
	/*
	public static int solution(int N, int number) {
		HashSet<Integer> set = new HashSet<>();
		HashSet<Integer> tmpSet = new HashSet<>();
		HashSet<Integer> totalSet = new HashSet<>();
		char[] operator = { '+', '-', 'x', '/' };
		// int count = 1;
		for (int count = 1; count < 8; count++) {
			// 개수 증가
			tmpSet.addAll(set);
			totalSet.addAll(set); //전체 개수
			set.clear();
			if (count > 8)
				return -1;
			
			for (int i = 0; i < operator.length; i++) {
				Iterator it = tmpSet.iterator();
				switch (operator[i]) {
				case '+':
					while (it.hasNext()) {
						int tmp = (int) it.next();
						tmp += N; // 값 더함
						if(!totalSet.contains(tmp))
							set.add(tmp); // 값 추가
					}
					break;
				case '-':
					while (it.hasNext()) {
						int tmp = (int) it.next();
						tmp -= N; // 값 뻄
						if(!totalSet.contains(tmp))
						set.add(tmp); // 값 추가
					}
					break;
				case 'x':
					while (it.hasNext()) {
						int tmp = (int) it.next();
						tmp *= N; // 값 곱함
						if(!totalSet.contains(tmp))
						set.add(tmp); // 값 추가
					}
					break;
				case '/':
					while (it.hasNext()) {
						int tmp = (int) it.next();
						tmp /= N; // 값 나눔
						if(!totalSet.contains(tmp))
						set.add(tmp); // 값 추가
					}
					break;

				}
			}
			if (count > 1) { // N으로만 이루워진 숫자
				int tmp = 0;
				for (int i = 0; i < count; i++) {
					tmp += N * (int) Math.pow(10, i);
				}
				set.add(tmp);
			} else {
				set.add(N); // count가 1일 경우
				if (N == number)
					return count;
			}
			if (set.contains(number))
				return count;
			tmpSet.clear();
		}
		return -1;
	}*/
}
