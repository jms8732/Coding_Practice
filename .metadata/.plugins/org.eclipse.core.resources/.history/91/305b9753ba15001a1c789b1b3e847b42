package dijkstra;
//ÆÄÆ¼

import java.util.*;
import java.io.*;

public class problem_1238 {
	static int start =0;
	static int N = 0, M= 0;
	static BufferedReader br;
	static int INF = Integer.MAX_VALUE;
	public static void main(String[] args) {
		br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		try {
			st = new StringTokenizer(br.readLine()); 
			N = Integer.parseInt(st.nextToken()); //n
			M = Integer.parseInt(st.nextToken()); //m
			start  = Integer.parseInt(st.nextToken()) -1;
			
			dijkstra(start);
			
		}catch(IOException e) {
			e.printStackTrace();
		}
		
	}
	private static void dijkstra(int start) throws IOException {
		int dist [] = new int[N];
		Arrays.fill(dist, INF);
		List<Node> list[] = new ArrayList[N];
		dist[start] = 0;
		for(int i= 0 ; i < N ; i++) list[i] = new ArrayList<>();
		for(int i =0 ; i < M ; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int s = Integer.parseInt(st.nextToken()) -1;
			int e = Integer.parseInt(st.nextToken()) -1;
			int d = Integer.parseInt(st.nextToken());
			
			list[s].add(new Node(e,d));
		}
		
		PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {

			@Override
			public int compare(Node arg0, Node arg1) {
				// TODO Auto-generated method stub
				if(arg0.distance < arg1.distance)
					return -1;
				else
					return 1;
			}
			
		});
		pq.add(new Node(start,0));
		
		while(!pq.isEmpty()) {
			Node tmp = pq.poll();
			int idx = tmp.idx;
			int distance = tmp.distance;
			for(Node ne : list[idx]) {
				int nextIdx = ne.idx;
				int nextDistance = dist[idx] + ne.distance;
				if(dist[nextIdx] > nextDistance) {
					dist[nextIdx ] =nextDistance;
					pq.add(new Node(nextIdx,dist[nextIdx]));
				}
			}
		}
	}
	private static class Node{
		int idx,distance;
		public Node(int i , int d) {
			this.idx =i;
			this.distance =d;
		}
	}
}
