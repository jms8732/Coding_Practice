package others;

//미네랄
import java.util.*;
import java.io.*;

public class problem_2933 {
	static char [][] cave;
	static boolean [][] visited;
	static int ud[] = {-1,0,1,0};
	static int rl[] = {0,1,0,-1};
	
	static int R,C;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		
		cave = new char[R][C];
		visited = new boolean[R][C];
		
		for(int i =0 ; i < R ; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j =0 ; j< C ; j++) {
				cave[i][j] = st.nextToken().charAt(0);
			}
		}
		
		int N = Integer.parseInt(br.readLine());
		
		boolean side = false;
		st = new StringTokenizer(br.readLine());
		for(int i =0 ; i< N ; i++) {
			throwBar(side,Integer.parseInt(st.nextToken()));
			if(!isGoDown()) {
				goDown();
			}
			side = !side;
			visited = new boolean[R][C];
		}
	}
	
	private static void throwBar(boolean side, int height) {
		if(!side) {
			//left to right
			int start =0;
			while(start < C) {
				if(cave[height][start] == '.')
					start++;
				else {
					//미네랄을 부신 경우
					cave[height][start] = '.';
					break;
				}
			}
		}else {
			//right to left
			int start = C-1;
			while(start >= 0) {
				if(cave[height][start] == '.')
					start--;
				else {
					//미네랄을 부신 경우
					cave[height][start] = '.';
					break;
				}
			}
		}
		
	}
	private static boolean isGoDown() {
		for(int i = R-1 ; i >=0 ; i--) {
			for(int j =0 ; j < C;  j++) {
				if(!visited[i][j] && cave[i][j] =='x')
					check(i,j);
			}
		}
		
		for(int i =0 ; i <R ; i++) {
			for(int j= 0 ; j< C ; j++) {
				if(!visited[i][j] && cave[i][j] == 'x')
					return false;
			}
		}
		
		return true;
	}
	private static void goDown() {
		for(int i = R-1; i >= 0 ; i--) {
			for(int j =0 ; j < C ; j++) {
				if(!visited[i][j] && cave[i][j] == 'x') {
					int cur =i;
					while(true) {
						cur += 1;
						if(cur >= R || cave[cur][j] == 'x')
							break;
						
					}
					cave[i][j] = '.';
					cave[cur][j] = 'x';
				}
			}
		}
	}
	private static void check(int x ,int y) {
		visited[x][y] = true;
		for(int i =0 ; i < 4 ; i++) {
			int nx = x + ud[i];
			int ny = y + rl[i];
			
			if(nx <0 || nx >=R || ny <0 || ny >= C || cave[nx][ny] == '.')
				continue;
			
			
			check(nx,ny);
		}
	}
}
