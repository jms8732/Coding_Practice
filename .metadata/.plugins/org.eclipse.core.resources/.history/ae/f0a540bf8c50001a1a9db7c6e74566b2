package bitmask;

//°è´Ü¼ö
import java.util.*;
import java.io.*;

public class problem_1562 {
	static int[][] dp;
	static int IMPOSSIBLE = -100;
	static int MOD = 1000000000;

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		int N = scanner.nextInt();

		dp = new int[N][1 << 10];
		for (int[] tmp : dp) {
			Arrays.fill(tmp, IMPOSSIBLE);
		}
		int result = 0;
		long start = System.currentTimeMillis();
		if (N < 10)
			System.out.println(result);
		else {
			for (int i = 9; i >= 1; i--) {
				int bit = 1 << i;
				result += (dfs(bit, N - 1, i) % MOD);

			}
			long end = System.currentTimeMillis();
			System.out.println("time : " + (end - start) / 1000.0);
			System.out.println(result );
		}

	}

	private static int dfs(int bit, int N, int cur) {
		if (N == 0) {
			if (bit == (1 << 10) - 1) {
				return 1;
			}
			return 0;
		}

		if (dp[N][bit] != IMPOSSIBLE) {
			return dp[N][bit];
		}

		int left = cur - 1;
		int right = cur + 1;
		int lv = 0, rv = 0;

		if (left >= 0)
			lv = dfs(bit | (1 << left), N - 1, left);
		if (right <= 9)
			rv = dfs(bit | (1 << right), N - 1, right);

		dp[N][bit] = lv + rv % MOD;

		return dp[N][bit];

	}
}
