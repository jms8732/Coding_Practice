package dp;

//½ºÆ¼Ä¿
import java.io.*;
import java.util.*;

public class problem_9465 {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		int T = Integer.parseInt(st.nextToken());

		int N = Integer.parseInt(br.readLine());
		int[][] map = new int[2][N];
		for (int i = 0; i < 2; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		int [][] dp = new int[3][N];
		dp[0][0] = map[0][0];
		dp[1][0] = map[1][0];
		int idx = -2;
		for(int i =1 ; i < N ; i++) {
			int tmp = i % 2;
			dp[0][i] = dp[0][i-1] + map[tmp][i];
			tmp = (tmp+ 1) % 2;
			dp[1][i] = dp[1][i-1] + map[tmp][i];
			if(idx +i >= 0) {
				int big = Math.max(dp[idx+i][0], dp[idx+i][1]);
				big = Math.max(big, dp[idx+i][2]);
				dp[i][3] = big;
			}
		}
		
		int big = Math.max(dp[N-1][0], dp[N-1][1]);
		big = Math.max(dp[N-1][2],big);
		
		System.out.println(big);
	}
}
