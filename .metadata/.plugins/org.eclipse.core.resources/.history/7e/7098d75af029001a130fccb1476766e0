package programmers1;
//배달

import java.util.*;

public class problem_21 {
	public static void main(String[] args) {
		int[][] road = { { 1, 2, 1 }, { 1,3,2 }, { 2,3, 2 },
				{3,4,3},{3,5,2},{3,5,3},{5,6,1}};
		int result = solution(6, road, 4);
		System.out.println(result);
	}

	public static int solution(int N, int[][] road, int K) {
		int answer = 0;
		List<Node> list[] = new ArrayList[N];
		int[] dist = new int[N];
		PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {

			@Override
			public int compare(Node arg0, Node arg1) {
				// TODO Auto-generated method stub
				if (arg0.weight < arg1.weight)
					return -1;
				else
					return 1;

			}

		});

		for (int i = 0; i < N; i++)
			list[i] = new ArrayList<>();

		for (int i = 0; i < road.length; i++) {
			int s = road[i][0] - 1;
			int f = road[i][1] - 1;
			if(s > f) {
				int tmp = s;
				s = f;
				f = tmp;
			}
			int w = road[i][2];

			list[s].add(new Node(f, w));
		}

		for(int i= 0; i < N ; i++) {
			int tmpDist[] = new int[N];
			Arrays.fill(tmpDist, Integer.MAX_VALUE);
			tmpDist[i] = 0;
			pq.add(new Node(i,0));
			
			while (!pq.isEmpty()) { // 다익스트라 알고리즘
				Node tmp = pq.poll();
				int current = tmp.cur;
				for (Node next : list[current]) {
					if (tmpDist[next.cur] > tmpDist[current] + next.weight) {
						tmpDist[next.cur] = tmpDist[current] + next.weight;
						pq.add(new Node(next.cur, tmpDist[next.cur]));
					}
				}
			}
			
			dist[i] = tmpDist[i]; //해당 방향으로 갈 수 있는 개수
		}
		
		/*
		pq.add(new Node(0, 0));

		while (!pq.isEmpty()) { // 다익스트라 알고리즘
			Node tmp = pq.poll();
			int current = tmp.cur;
			for (Node next : list[current]) {
				if (dist[next.cur] > dist[current] + next.weight) {
					dist[next.cur] = dist[current] + next.weight;
					pq.add(new Node(next.cur, dist[next.cur]));
				}
			}
		}
		*/
		
		for (int i = 0; i < dist.length; i++) { // 시간내에 도달할 수 있는 지역 찾기
			if (dist[i] <= K) {
				answer++;
			}
		}

		return answer;
	}

	private static class Node {
		int cur = 0;
		int weight = 0;

		public Node(int current, int weight) {
			this.cur = current;
			this.weight = weight;
		}
	}
}
