package samsung_Atype;

//게리 맨더링
import java.util.*;
import java.io.*;

public class problem_17471 {
	static int value[]; // 값
	static List<Integer>[] list; // 연결된 요소
	static int answer = -1;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		boolean[] visited = new boolean[N];
		value = new int[N];

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			value[i] = Integer.parseInt(st.nextToken());
		}

		list = new ArrayList[N];

		// 연결된 요소 넣기
		for (int i = 0; i < list.length; i++)
			list[i] = new ArrayList<>();
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int m = Integer.parseInt(st.nextToken());
			for (int l = 0; l < m; l++) {
				list[i].add(Integer.parseInt(st.nextToken()) - 1);
			}
		}

		boolean[] count = new boolean[N];
		int c =0 ;
		for(int i =0 ; i< list.length ; i++) {
			if(!count[i]) {
				c++;
				connectCount(i,count);
			}
		}
		
		if(c <= 2) //연결된 요소가 2개 이하일 경우만 수행
			dfs(0, 0, visited);
		System.out.println(answer);
	}

	private static void connectCount(int idx, boolean[] visited) {
		visited[idx] = true;
		for(int i =0 ; i < list[idx].size() ; i++) {
			int iidx = list[idx].get(i);
			if(!visited[iidx]) {
				connectCount(iidx,visited);
			}
		}
	}

	private static int calculate(boolean[] visited) {
		int A = 0, B = 0;
		for (int i = 0; i < visited.length; i++)
			if (visited[i])
				A += value[i];
			else
				B += value[i];

		int result = Math.abs(A - B);
		return result;
	}

	
	private static void connect(int idx,boolean part, boolean [] connectP, boolean[] visited) {
		
		connectP[idx] = true;
		for(int i = 0; i < list[idx].size() ; i++) {
			int iidx = list[idx].get(i);
			if(!connectP[iidx] && part == visited[iidx]) {
				connect(iidx,part,connectP,visited);
			}
		}
	}
	private static boolean isConnected(boolean [] connect, List<Integer> A, List<Integer> B) {
		Set<Integer> Aset = new TreeSet<>();
		Set<Integer> Bset = new TreeSet<>();
		
		for(int i =0 ; i< connect.length ; i++) {
			boolean cp = connect[i];
			if(cp == true)
				Aset.add(i);
			else
				Bset.add(i);
			
			for(int j =0 ; j < list[i].size() ; j++) {
				int idx = list[i].get(j);
				if(cp == connect[idx]) {
					if(cp == true)
						Aset.add(idx);
					else
						Bset.add(idx);
				}
			}
		}
		
		if(Aset.size() == A.size() && Bset.size() == B.size())
			return true;
		return false;
		
	}
	
	private static void dfs(int depth, int next, boolean[] visited) {
		if (depth == visited.length) {
			List<Integer> A = new ArrayList<>();
			boolean [] connectA = new boolean[visited.length];
			List<Integer> B = new ArrayList<>();
			boolean[] connectB = new boolean[visited.length];
			
			for(int i =0 ; i< visited.length ; i++) {
				if(visited[i])
					A.add(i);
				else
					B.add(i);
			}
			
			boolean [] connect = new boolean[visited.length];
			
			//현재 당파에 맞게 연결돼 있는 것을 찾는다.
			for(int i =0  ; i< visited.length ; i++) {
				if(!connect[i]) {
					connect(i,true,connect,visited);
				}
			}
			
			if(isConnected(connect,A,B)) {
				
			}
			
		}

		for (int i = next; i < visited.length; i++) {
			visited[i] = true;
			dfs(depth + 1, i + 1, visited);
			visited[i] = false;
			dfs(depth + 1, i + 1, visited);
		}
	}
}
