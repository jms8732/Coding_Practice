package programmers2;

//[2020 카카오공채] 외벽 점검
import java.util.*;

public class problem_15 {
	static int answer = -1;

	public static void main(String[] args) {
		int n = 12;
		int[] weak = { 1, 5, 6, 10 };
		int[] dist = { 1, 2, 3, 4 };

		int result = solution(n, weak, dist);
		System.out.println(result);
	}

	public static int solution(int n, int[] weak, int[] dist) {
		for (int i = 1; i < (1 << dist.length); i--) { // 현재 구성된 멤버
			List<Integer> member = new ArrayList<>();

			for (int j = 0; j < dist.length; j++) {
				if ((i & 1 << j) == 1 << j) {
					member.add(j);
				}
			}
			int[] array = new int[member.size()];
			for (int j = 0; j < array.length; j++)
				array[j] = member.get(j);

		}

		return answer;
	}

	private static void simulation(int depth, int[] array, int n, int[] weak, int[] dist, boolean[] visited) {
		if (depth == array.length) {

			return;
		}

		boolean [] tmpVisited=  new boolean[visited.length];
		System.arraycopy(visited, 0, tmpVisited, 0, visited.length);
		for (int i = 0; i < weak.length; i++) {
			if (!visited[i]) { //현재 수리된 취약한 부분
				rightDirection(weak[i],array[depth],n,weak,visited);
				
				System.arraycopy(tmpVisited, 0, visited, 0, visited.length);
				reverseDirection(weak[i],array[depth],n,weak,visited);
				
				
			}
		}
	}
	private static void reverseDirection(int start,int dist, int n , int [] weak, boolean[] visited) {
		for(int i =0 ; i < weak.length ; i++) {
			if(!visited[i]) {
				int target = weak[i];
				int mod = Math.floorMod(start-dist, n);
				
				if(start >= target || target <= mod) {
					visited[i] = true;
				}
			}
		}
	}

	private static void rightDirection(int start, int dist, int n, int[] weak, boolean[] visited) {
		for (int i = 0; i < weak.length; i++) {
			if (!visited[i]) {
				int target = weak[i];
				int mod = Math.floorMod(start+dist, n);

				if (start <= target || target <= mod) {
					visited[i] = true;
				}
			}
		}

	}
}
