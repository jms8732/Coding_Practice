package combination;

//∫ÒºÛ

import java.util.*;
import java.io.*;

public class problem_1799 {
	static int N = 0;
	static int count = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());

		int[][] map = new int[N][N];
		// map √ ±‚»≠
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}


		dfs(0,0,map);
	}

	private static void dfs(int x,int y, int[][] map) {
		for (int i = x; i < N; i++) {
			for (int j = y; j < N; j++) {
				if (map[i][j] == 1 && check(i, j, map)) {
					map[i][j] = -1;// ∫ÒºÛ¿ª µ–¥Ÿ.
					dfs(i,j, map);
					map[i][j] = 1;
				}
			}
		}
		count = Math.max(count, countMap(map));
	
	}
	private static int countMap(int[][] map) {
		int count =0 ;
		for(int i[] : map) {
			for(int j = 0 ; j < i.length; j++) {
				if(i[j] == -1)
					count++;
			}
		}
		
		return count;
	}

	private static boolean check(int x, int y, int[][] map) {
		// ªÛ¡¬
		int tmpX = x, tmpY = y;
		int[] ud = { -1, -1, 1, 1 };
		int[] rl = { -1, 1, -1, 1 };

		//ªÛ¡¬, ªÛøÏ, «œ¡¬, «œøÏ
		for (int i = 0; i < 4; i++) {
			x = tmpX;
			y = tmpY;
			while (true) {
				int nx = x + ud[i];
				int ny = y + rl[i];

				if (nx < 0 || nx >= N || ny < 0 || ny >= N)
					break;
				if (map[nx][ny] == -1)
					return false;

				x = nx;
				y = ny;
			}

		}
		return true;

	}
}
