package programmers;
//길찾기 게임

import java.util.*;

public class problem_44 {
	public static void main(String[] args) {
		int[][] tmp = { { 5, 3 }, { 11, 5 }, { 13, 3 }, { 3, 5 }, { 6, 1 }, { 1, 3 }, { 8, 6 }, { 7, 2 }, { 2, 2 } };
		int[][] result = solution(tmp);
		System.out.println(result);
	}

	public static int[][] solution(int[][] nodeinfo) {
		List<Node> list = new ArrayList<>();
		Node tree = null;
		for (int i = 0; i < nodeinfo.length; i++) {
			int x = nodeinfo[i][0];
			int y = nodeinfo[i][1];
			int number = i + 1;
			list.add(new Node(x, y, number, null, null));
		}

		list.sort(new Comparator<Node>() {

			@Override
			public int compare(Node arg0, Node arg1) {
				// TODO Auto-generated method stub
				if (arg0.y > arg1.y) // y로 내림 차순
					return -1;
				else
					return 1;
			}

		});
		int preList[] =new int [ nodeinfo.length];
		int postList[] = new int[nodeinfo.length];
		tree = buildTree(list);
		preOrder(tree,preList,0);
		
		for(int i =0 ; i< preList.length ; i++) {
			System.out.print(preList[i]+ " ");
		}
		postOrder(tree,postList,0);
		
		return new int[1][2];
	}
	
	public static void preOrder(Node tree, int[] preList, int idx ) {
		//전위 순회 root->left->right
		if(tree == null)
			return;
		
		preList[idx] = tree.number;
		preOrder(tree.left, preList,idx+1);
		preOrder(tree.right,preList,idx+1);
	}
	public static void postOrder(Node tree, int [] postList, int idx) {
		//후위 순회 left->right->root
	}
	
	public static Node buildTree(List<Node> list) {
		Node tree = null;
		for (int i = 0; i < list.size(); i++) {
			// list의 크기 만큼 반복문 수행
			Node tmp = list.get(i);
			if (tree == null)
				tree = tmp; // root
			else {
				Node parent = tree;
				while (true) {
					int childX = tmp.x;
					if (childX > parent.x) { // x값이 부모 보다 클 경우
						if(parent.right == null) {
							parent.right = tmp;
							break;
						}else
							parent = parent.right;
					} else {
						if(parent.left == null) {
							parent.left = tmp;
							break;
						}else
							parent = parent.left;
					}
				}

			}

		}
		
		return tree;
	}

	public static class Node {
		int x, y, number;
		Node left, right;

		public Node(int x, int y, int number, Node left, Node right) {
			this.x = x;
			this.y = y;
			this.number = number;
			this.left = left;
			this.right = right;
		}
	}
}
