package programmers;
//섬 연결하기

import java.util.*;

public class problem_31 {
	static int cost[][];
	static int totalCost;
	public static void main(String[] args) {
		int[][] tmp = { { 0, 1, 1 }, { 0, 2, 2 }, { 1, 2, 5 }, { 1, 3, 1 }, { 2, 3, 8 } };
		int result = solution(4, tmp);
		System.out.println(result);
	}

	public static int solution(int n, int[][] costs) {
		cost = new int[n][n];
		for (int i = 0; i < costs.length; i++) {
			cost[costs[i][0]][costs[i][1]] = costs[i][2]; // 비용 추가
			cost[costs[i][1]][costs[i][0]] = costs[i][2]; // 무 방향성이므로 반대쪽도 추가
		}
		int tCost = Integer.MAX_VALUE;
		boolean visited[] = new boolean[n];
		for(int i =0 ; i< n ; i++) {
			for(int j =0 ; j< n ; j++) {
				if(cost[i][j] != 0) {
					dfs(i,j,visited,cost[i][j],1);
				}
			}
		}
		return tCost;
	}
	
	public static void dfs(int x,int y, boolean visited[] ,int tmpCost, int idx) {
		visited[x] = true; //현재 위치 도달
		if(idx == visited.length-1) { //마지막에 도달 한 경우
			boolean check = false;
			for(int i =0 ; i < visited.length ; i++) {
				if(!visited[i]) {
					check =true;
					break;
				}
			}
			if(!check)
				totalCost = Math.min(tmpCost, totalCost);
			return;
		}
		
		Queue<Integer> next = new LinkedList<>();
		int nextX = y;
		for(int i =0 ; i< cost[nextX].length ; i++) {
			if(!visited[i] && cost[nextX][i] !=0)
				next.add(i); //인덱스 추가
		}
		
		while(!next.isEmpty()) {
			int nextY= next.poll();
			tmpCost += cost[nextX][nextY];
			if(!visited[nextY])
				dfs(nextX,nextY,visited,tmpCost,idx+1);
			tmpCost -= cost[nextX][nextY];
			visited[x] = false;
		}
	}

}
