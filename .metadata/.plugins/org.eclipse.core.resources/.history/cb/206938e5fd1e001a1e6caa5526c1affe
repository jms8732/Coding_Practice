package combination;
//단어 수학

import java.util.*;
import java.io.*;

public class problem_1339 {
	static boolean[] visited; // 숫자 선택 중복 방지
	static String[] s;
	static Map<Character, Integer> map; // 글자 숫자 중복 방지
	static List<Character> list;
	static int[] number;
	static int N;
	static int min;

	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Set<Character> set = new HashSet<>();
		try {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			s = new String[N];
			map = new HashMap<>();

			for (int i = 0; i < N; i++) {
				String tmp = br.readLine();
				s[i] = tmp;
				for (int j = 0; j < tmp.length(); j++) {
					set.add(tmp.charAt(j)); // 문자들 집합에 저장
				}
			}
			list = new ArrayList<>(set);
			min = 10 - set.size(); // 최솟값 정함
			number = new int[set.size()]; // 숫자 저장
			visited = new boolean[set.size()];

			for (int i = 0; i < number.length; i++)
				number[i] = 9 - i;

			int depth = 0;
			int result = 0;

			for (int i = 0; i < number.length; i++) {
				StringBuilder sb = new StringBuilder();
				if (!visited[i]) {
					visited[i] = true;
					dfs(depth+1,sb.append(number[i]));
					visited[i] = false;
				}
			}

			System.out.println(result);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void dfs(int depth,StringBuilder sb) {
		if(number.length == depth) {
			System.out.println(sb.toString());
		}
		
		for(int i =0 ; i < number.length ; i++) {
			if(!visited[i]) {
				//아직 탐색하지 않은 숫자가 있는 경우
				visited[i] = true;
				dfs(depth+1,sb.append(number[i]));
				visited[i] = false;
			}
		}
	}

}
