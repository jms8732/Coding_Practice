package greedy;

//전구와 스위치
import java.util.*;
import java.io.*;

public class problem_2138 {
	static char[] A, B;
	static int IMPOSSIBLE = 10000001;
	static int answer;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int N = Integer.parseInt(br.readLine());

		A = br.readLine().toCharArray();
		B = br.readLine().toCharArray();

		int idx = 0, count = 0;
		answer = IMPOSSIBLE;

		// 첫번째 스위치를 안 누른 경우
		if (A[idx] == B[idx])
			simulation(idx + 1, count);

		// 누른 경우
		make(A, idx);
		if (A[idx] == B[idx])
			simulation(idx + 1, count + 1);

		if (count == IMPOSSIBLE)
			System.out.println(-1);
		else
			System.out.println(answer);
	}

	private static void simulation(int idx, int count) {

		// 마지막 인덱스인 경우
		if (idx == A.length - 2) {
			if (A[idx] == B[idx] && A[idx + 1] == B[idx + 1])
				answer = Math.min(answer, count);

			make(A, idx);

			if (A[idx] == B[idx] && A[idx + 1] == B[idx + 1])
				answer = Math.min(answer, count);

			return;
		}

		// 해당 인덱스의 스위치를 안 누른 경우
		if (A[idx] == B[idx])
			simulation(idx + 1, count);

		make(A, idx);
		// 누른 경우
		if (A[idx] == B[idx])
			simulation(idx + 1, count + 1);

		make(A, idx);
	}

	private static void make(char[] A, int idx) {
		for (int i = -1; i <= 1; i++) {
			if (idx + i < 0 || idx + i >= A.length) {
				continue;
			}
			int tmpI = idx + i;
			if (A[tmpI] == '0')
				A[tmpI] = '1';
			else
				A[tmpI] = '0';
		}
	}
}
