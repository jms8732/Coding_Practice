package programmers;
//섬 연결하기

import java.util.*;

public class problem_31 {
	public static void main(String[] args) {
		int[][] tmp = { { 0, 1, 1 }, { 0, 2, 2 }, { 1, 2, 5 }, { 1, 3, 1 }, { 2, 3, 8 } };
		int result = solution(4, tmp);
		System.out.println(result);
	}

	public static int solution(int n, int[][] costs) {
		PriorityQueue<Node> queue = new PriorityQueue<>();
		for (int i = 0; i < costs.length; i++) {
			Node nn = new Node(costs[i][0], costs[i][1], costs[i][2]);
			queue.add(nn); // 오름 차순으로 정렬
		}
		int[] circle = new int[n];
		for (int i = 0; i < n; i++) {
			circle[i] = i;
		}
		int totalCost = 0;
		while (!queue.isEmpty()) {
			Node nTmp = queue.poll();
			int b = nTmp.b;
			int a = nTmp.a;
			if (circle[b] != circle[a]) {
				circle[b] = find(circle, b); // 부모 설정
				totalCost += nTmp.cost;
			}
		}

		return totalCost;
	}

	public static int find(int[] circle, int idx) {
		if (idx == circle[idx])
			return circle[idx];
		return find(circle, circle[idx]);
	}
}

class Node implements Comparable<Node> {
	int a, b, cost;

	public Node(int a, int b, int cost) {
		this.a = a;
		this.b = b;
		this.cost = cost;
	}

	@Override
	public int compareTo(Node o) {
		// TODO Auto-generated method stub
		if (this.cost > o.cost)
			return 1;
		else if(this.cost == o.cost)
			return 0;
		else
			return 1;
	}

}
