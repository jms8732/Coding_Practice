package combination;

//N-Queen
import java.io.*;

public class problem_9663 {
	static int count = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		long start = System.currentTimeMillis();
		int result = solution(Integer.parseInt(br.readLine()));
		long end = System.currentTimeMillis();
		System.out.println("time : " + (end - start) / 1000.0);
		System.out.println(result);
	}

	public static int solution(int n) {
		boolean[][] map = new boolean[n][n];
		int depth = 0;
		dfs(depth, 0, n, map);
		return count;
	}

	private static void dfs(int depth, int next, int n, boolean[][] map) {
		if (depth == n) {
			// 퀸의 개수가 n개가 된 경우, 경우의 수를 증가시킨다.
			count++;
			return;
		}
		boolean[][] tmpMap = new boolean[n][n];

		copyMap(map, tmpMap); // 채우기 이전의 모습

		for (int j = 0; j < n; j++) {
			if (!map[next][j]) { // 퀸은 좌우로 이동이 가능하므로 행에 맞게 행동한다.
				fill(next, j, map);
				map[next][j] = true;
				dfs(depth + 1, next + 1, n, map);
				map[next][j] = false;
				copyMap(tmpMap, map);
			}
		}
	}

	private static void copyMap(boolean[][] src, boolean[][] target) {
		int idx = 0;
		for (boolean[] tmp : src) {
			System.arraycopy(tmp, 0, target[idx++], 0, tmp.length);
		}
	}

	private static void fill(int x, int y, boolean[][] map) {
		int gap = 1;
		while (x < map.length) {
			// x가 map의 범위를 벗어나기 전 까지 반복
			int nx = x + 1; // 다음 x좌표
			map[nx][y] = true;
			int leftY = y - gap;
			int rightY = y + gap;
			if (leftY > 0)
				map[x][leftY] = true;
			if (rightY > map.length)
				map[x][rightY] = true;

			x = nx;
		}
	}
}
