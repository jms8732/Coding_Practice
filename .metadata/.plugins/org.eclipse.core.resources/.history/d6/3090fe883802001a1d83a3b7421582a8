package programmers;
//섬 연결하기

import java.util.*;

public class problem_31 {
	public static void main(String[] args) {
		int[][] tmp = {{0, 1, 5}, {1, 2, 3}, {2, 3, 3}, {3, 1, 2}, {3, 0, 4} };
		int result = solution(4, tmp);
		System.out.println(result);
	}

	public static int solution(int n, int[][] costs) {
		List<Node> queue = new ArrayList<>();
		for (int i = 0; i < costs.length; i++) {
			Node nn = new Node(costs[i][0], costs[i][1], costs[i][2]);
			queue.add(nn);
		}
		queue.sort(new Comparator<Node>() {// 오름 차순으로 정렬
			@Override
			public int compare(Node arg0, Node arg1) {
				// TODO Auto-generated method stub
				if (arg0.cost > arg1.cost)
					return 1;
				else if (arg0.cost < arg1.cost)
					return -1;
				else
					return 0;
			}
		});
		int[] circle = new int[n];
		for (int i = 0; i < n; i++) {
			circle[i] = i;
		}
		int totalCost = 0;
		for (int i = 0; i < queue.size(); i++) {
			Node nTmp = queue.get(i);
			int b = nTmp.b;
			int a = nTmp.a;
			if (i == 0) {
				if (circle[a] > circle[b])
					circle[a] = circle[b];
				else
					circle[b] = circle[a]; // 처음 인 경우
				totalCost += nTmp.cost;

			} else {
				
			}
		}

		return totalCost;
	}

	public static int find(int[] circle, int idx) {
		if (idx == circle[idx])
			return circle[idx];
		return find(circle, circle[idx]);
	}
}

class Node {
	int a, b, cost;

	public Node(int a, int b, int cost) {
		this.a = a;
		this.b = b;
		this.cost = cost;
	}

}
