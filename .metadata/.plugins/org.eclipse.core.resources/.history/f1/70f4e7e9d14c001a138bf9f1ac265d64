package topology_sort;

//게임 개발
import java.util.*;
import java.io.*;

public class problem_1516 {
	static int N;
	static List<Integer> list[];
	static int[] indegree;
	static int[] time;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		list = new ArrayList[N];
		indegree = new int[N];
		time = new int[N];

		for (int i = 0; i < N; i++)
			list[i] = new ArrayList<>();

		StringTokenizer st = null;

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int timer = Integer.parseInt(st.nextToken());
			time[i] = timer;

			int next = Integer.parseInt(st.nextToken());

			while (next != -1) {
				list[next - 1].add(i);
				next = Integer.parseInt(st.nextToken());
			}
		}

		topology_sort();
	}

	private static void topology_sort() {
		PriorityQueue<Node> queue = new PriorityQueue<Node>();

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < list[i].size(); j++) {
				indegree[list[i].get(j)] += 1;
			}
		}

		for (int i = 0; i < N; i++) {
			if (indegree[i] == 0)
				queue.add(new Node(time[i], i));
		}

		int answer[] = new int[N];
	
		for (int i = 0; i < N; i++) {
			if (queue.isEmpty())
				break;
			Node current = queue.poll();
			answer[i] = current.time;

			for (int j = 0; j < list[current.index].size(); j++) {
				indegree[list[current.index].get(j)] -= 1;

				if (indegree[list[current.index].get(j)] == 0) {
					queue.add(new Node(current.time + time[list[current.index].get(j)], list[current.index].get(j)));
				}
			}

		}

		for (int i = 0; i < N; i++) {
			System.out.println(answer[i]);
		}
	}

	private static class Node implements Comparator<Node> {
		int time, index;

		public Node(int t, int i) {
			this.time = t;
			this.index = i;
		}

		@Override
		public int compare(Node arg0, Node arg1) {
			// TODO Auto-generated method stub
			if (arg0.time < arg1.time)
				return -1;
			else
				return 1;
		}

	}
}
