package programmers2;

//[2020 카카오공채] 외벽 점검
import java.util.*;

public class problem_15 {
	static boolean[] visited;
	static int answer =-1;
	
	public static void main(String[] args) {
		int n = 12;
		int[] weak = {1,5,6,10};
		int[] dist= {1,2,3,4};
		
		int result = solution(n,weak,dist);
		System.out.println(result);
	}
	
	public static int solution(int n, int[] weak, int[] dist) {
		visited = new boolean[n];
		
		for(int i =1 ; i < 1<<dist.length ; i++) {
			int memberCount = Integer.bitCount(i);
			simulation(0,memberCount,n,i,dist,weak,0);
        }
        
        
        return answer;
    }
	
	private static void simulation(int depth, int k, int n, int member, int[] dist, int [] weak, int cp) {
		if(depth == k) {
			if(isComplete(weak)) {
				if(answer ==- 1)
					answer = depth;
				else
					answer = Math.min(answer, depth);
			}
			
			return;
		}
		
		
		for(int i =0 ; i < dist.length ; i++) {
			if((member & 1<<i) == 1<<i) {
				int curDist = dist[i];
				
				for(int j =0 ; j < curDist ; j++) {
					if(!visited[j]) {
						int tmp = Math.floorMod(j+cp, n);
						visited[tmp] = true;
					}
				}
				member &= ~(1<<i);
				simulation(depth+1,k,n,member ,dist,weak,curDist+cp);
				member |= (1<<i);
			}
		}
	}
	
	
	private static boolean isComplete(int [] weak) {
		for(int i =0 ; i < weak.length ; i++) {
			if(!visited[weak[i]-1])
				return false;
		}
		
		return true;
	}
}
