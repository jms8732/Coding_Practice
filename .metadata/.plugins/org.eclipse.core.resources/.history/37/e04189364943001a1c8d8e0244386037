package others;

import java.util.*;

public class problem_1837 {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

		int P = scanner.nextInt();
		int K = scanner.nextInt();

		boolean[] array = new boolean[K + 1];
		List<Integer> list = new ArrayList<>(); //소수를 찾는다.
		
		for (int i = 2; i < array.length; i++) {
			if (!array[i]) {
				list.add(i);
				for (int j = i; j < array.length; j += i) {
					array[i] = true;
				}
			}
		}
		int prime[] = new int[2];
		int depth = 0 , next =0 ;
		boolean check = dfs(depth,next,P,prime,list);
		if(!check)
			System.out.println("GOOD");
	}
	
	private static boolean dfs(int depth,int next,int P, int [] prime, List<Integer> list) {
		if(depth == prime.length) {
			int value = prime[0] * prime[1];
			if(P == value)
			{
				int small = Math.min(prime[0], prime[1]);
				System.out.println("BAD" + small);
				return true;
			}
			
			return false;
		}
		
		boolean check = false;
		for(int i = next ; i< list.size() ; i++) {
			prime[depth] = list.get(i);
			check = dfs(depth+1,i+1,P,prime,list);
			if(check)
				break;
		}
		
		return check;
	}
}
