package dp;

//평범한 배낭
import java.util.*;
import java.io.*;
public class problem_12865 {
	public static void main(String[] args) throws IOException{
		BufferedReader br = new  BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		
		List<Node> list  = new ArrayList<>();
		//값 할당
		for(int i =0 ; i< N ; i++) {
			st = new StringTokenizer(br.readLine());
			int w = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			list.add(new Node(w,v));
		}
		
		//무게가 가벼운 순으로 오름차순 정렬
		list.sort(new Comparator<Node>() {

			@Override
			public int compare(Node o1, Node o2) {
				// TODO Auto-generated method stub
				if(o1.weight < o2.weight)
					return -1;
				else
					return 1;
			}
		
		});
		
		int IMPOSSIBLE = 1000000000;
		int [][] dp = new int [list.size()][K+1];
		
		for(int [] tmp : dp)
			Arrays.fill(tmp, IMPOSSIBLE);
		
		//처음 위의 값 할당
		int step = 1;
		for(int i = list.get(0).weight ; i <= K ; i+= list.get(0).weight)
			dp[0][i] = list.get(0).value * (step++);
		
		
		for(int i = 1; i < list.size() ; i++) {
			System.arraycopy(dp[i-1], 0, dp[i], 0, list.get(i).weight);
			if(dp[i-1][list.get(i).weight] == IMPOSSIBLE)
				dp[i][list.get(i).weight] = list.get(i).value;
			else
				dp[i][list.get(i).weight] = Math.max(dp[i-1][list.get(i).weight], list.get(i).value);
			for(int j = list.get(i).weight+1; j <=K ; j++) {
				dp[i][j] = Math.min(dp[i-1][j],dp[i][list.get(i).weight] + dp[i][j-list.get(i).weight]);
				
			}
		}
		
		System.out.println(dp[N-1][K]);
		
	}
	
	private static class Node{
		int weight, value;
		public Node(int w,  int v) {
			this.weight =w;
			this.value  =v;
		}
	}
}
